// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: summarizer/summarizer.proto

#ifndef PROTOBUF_summarizer_2fsummarizer_2eproto__INCLUDED
#define PROTOBUF_summarizer_2fsummarizer_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "summarizer/document.pb.h"
#include "summarizer/distribution.pb.h"
// @@protoc_insertion_point(includes)

namespace topicsum {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_summarizer_2fsummarizer_2eproto();
void protobuf_AssignDesc_summarizer_2fsummarizer_2eproto();
void protobuf_ShutdownFile_summarizer_2fsummarizer_2eproto();

class Article;
class SummaryOptions;
class SummaryLength;
class GibbsSamplingOptions;
class KLSumOptions;
class TopicSumOptions;
class NewsPostProcessorOptions;
class SummarizerOptions;

enum SummaryLength_LengthUnit {
  SummaryLength_LengthUnit_CHARACTER = 0,
  SummaryLength_LengthUnit_TOKEN = 1,
  SummaryLength_LengthUnit_SENTENCE = 2,
  SummaryLength_LengthUnit_NUM_LENGTH_UNITS = 3
};
bool SummaryLength_LengthUnit_IsValid(int value);
const SummaryLength_LengthUnit SummaryLength_LengthUnit_LengthUnit_MIN = SummaryLength_LengthUnit_CHARACTER;
const SummaryLength_LengthUnit SummaryLength_LengthUnit_LengthUnit_MAX = SummaryLength_LengthUnit_NUM_LENGTH_UNITS;
const int SummaryLength_LengthUnit_LengthUnit_ARRAYSIZE = SummaryLength_LengthUnit_LengthUnit_MAX + 1;

const ::google::protobuf::EnumDescriptor* SummaryLength_LengthUnit_descriptor();
inline const ::std::string& SummaryLength_LengthUnit_Name(SummaryLength_LengthUnit value) {
  return ::google::protobuf::internal::NameOfEnum(
    SummaryLength_LengthUnit_descriptor(), value);
}
inline bool SummaryLength_LengthUnit_Parse(
    const ::std::string& name, SummaryLength_LengthUnit* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SummaryLength_LengthUnit>(
    SummaryLength_LengthUnit_descriptor(), name, value);
}
enum KLSumOptions_OptimizationStrategy {
  KLSumOptions_OptimizationStrategy_GREEDY_OPTIMIZATION = 0,
  KLSumOptions_OptimizationStrategy_SENTENCE_RANKING = 1,
  KLSumOptions_OptimizationStrategy_NUM_OPTIMIZATIONS = 2
};
bool KLSumOptions_OptimizationStrategy_IsValid(int value);
const KLSumOptions_OptimizationStrategy KLSumOptions_OptimizationStrategy_OptimizationStrategy_MIN = KLSumOptions_OptimizationStrategy_GREEDY_OPTIMIZATION;
const KLSumOptions_OptimizationStrategy KLSumOptions_OptimizationStrategy_OptimizationStrategy_MAX = KLSumOptions_OptimizationStrategy_NUM_OPTIMIZATIONS;
const int KLSumOptions_OptimizationStrategy_OptimizationStrategy_ARRAYSIZE = KLSumOptions_OptimizationStrategy_OptimizationStrategy_MAX + 1;

const ::google::protobuf::EnumDescriptor* KLSumOptions_OptimizationStrategy_descriptor();
inline const ::std::string& KLSumOptions_OptimizationStrategy_Name(KLSumOptions_OptimizationStrategy value) {
  return ::google::protobuf::internal::NameOfEnum(
    KLSumOptions_OptimizationStrategy_descriptor(), value);
}
inline bool KLSumOptions_OptimizationStrategy_Parse(
    const ::std::string& name, KLSumOptions_OptimizationStrategy* value) {
  return ::google::protobuf::internal::ParseNamedEnum<KLSumOptions_OptimizationStrategy>(
    KLSumOptions_OptimizationStrategy_descriptor(), name, value);
}
enum SummarizerOptions_SummaryType {
  SummarizerOptions_SummaryType_GENERIC = 1,
  SummarizerOptions_SummaryType_QUERY = 2,
  SummarizerOptions_SummaryType_UPDATE = 4
};
bool SummarizerOptions_SummaryType_IsValid(int value);
const SummarizerOptions_SummaryType SummarizerOptions_SummaryType_SummaryType_MIN = SummarizerOptions_SummaryType_GENERIC;
const SummarizerOptions_SummaryType SummarizerOptions_SummaryType_SummaryType_MAX = SummarizerOptions_SummaryType_UPDATE;
const int SummarizerOptions_SummaryType_SummaryType_ARRAYSIZE = SummarizerOptions_SummaryType_SummaryType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SummarizerOptions_SummaryType_descriptor();
inline const ::std::string& SummarizerOptions_SummaryType_Name(SummarizerOptions_SummaryType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SummarizerOptions_SummaryType_descriptor(), value);
}
inline bool SummarizerOptions_SummaryType_Parse(
    const ::std::string& name, SummarizerOptions_SummaryType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SummarizerOptions_SummaryType>(
    SummarizerOptions_SummaryType_descriptor(), name, value);
}
// ===================================================================

class Article : public ::google::protobuf::Message {
 public:
  Article();
  virtual ~Article();

  Article(const Article& from);

  inline Article& operator=(const Article& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Article& default_instance();

  void Swap(Article* other);

  // implements Message ----------------------------------------------

  Article* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Article& from);
  void MergeFrom(const Article& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string content = 1;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 1;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // repeated float score = 2;
  inline int score_size() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 2;
  inline float score(int index) const;
  inline void set_score(int index, float value);
  inline void add_score(float value);
  inline const ::google::protobuf::RepeatedField< float >&
      score() const;
  inline ::google::protobuf::RepeatedField< float >*
      mutable_score();

  // @@protoc_insertion_point(class_scope:topicsum.Article)
 private:
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* content_;
  ::google::protobuf::RepeatedField< float > score_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_summarizer_2fsummarizer_2eproto();
  friend void protobuf_AssignDesc_summarizer_2fsummarizer_2eproto();
  friend void protobuf_ShutdownFile_summarizer_2fsummarizer_2eproto();

  void InitAsDefaultInstance();
  static Article* default_instance_;
};
// -------------------------------------------------------------------

class SummaryOptions : public ::google::protobuf::Message {
 public:
  SummaryOptions();
  virtual ~SummaryOptions();

  SummaryOptions(const SummaryOptions& from);

  inline SummaryOptions& operator=(const SummaryOptions& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SummaryOptions& default_instance();

  void Swap(SummaryOptions* other);

  // implements Message ----------------------------------------------

  SummaryOptions* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SummaryOptions& from);
  void MergeFrom(const SummaryOptions& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .topicsum.SummaryLength length = 1;
  inline bool has_length() const;
  inline void clear_length();
  static const int kLengthFieldNumber = 1;
  inline const ::topicsum::SummaryLength& length() const;
  inline ::topicsum::SummaryLength* mutable_length();
  inline ::topicsum::SummaryLength* release_length();
  inline void set_allocated_length(::topicsum::SummaryLength* length);

  // optional bool generate_debug = 8 [default = false];
  inline bool has_generate_debug() const;
  inline void clear_generate_debug();
  static const int kGenerateDebugFieldNumber = 8;
  inline bool generate_debug() const;
  inline void set_generate_debug(bool value);

  // @@protoc_insertion_point(class_scope:topicsum.SummaryOptions)
 private:
  inline void set_has_length();
  inline void clear_has_length();
  inline void set_has_generate_debug();
  inline void clear_has_generate_debug();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::topicsum::SummaryLength* length_;
  bool generate_debug_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_summarizer_2fsummarizer_2eproto();
  friend void protobuf_AssignDesc_summarizer_2fsummarizer_2eproto();
  friend void protobuf_ShutdownFile_summarizer_2fsummarizer_2eproto();

  void InitAsDefaultInstance();
  static SummaryOptions* default_instance_;
};
// -------------------------------------------------------------------

class SummaryLength : public ::google::protobuf::Message {
 public:
  SummaryLength();
  virtual ~SummaryLength();

  SummaryLength(const SummaryLength& from);

  inline SummaryLength& operator=(const SummaryLength& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SummaryLength& default_instance();

  void Swap(SummaryLength* other);

  // implements Message ----------------------------------------------

  SummaryLength* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SummaryLength& from);
  void MergeFrom(const SummaryLength& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SummaryLength_LengthUnit LengthUnit;
  static const LengthUnit CHARACTER = SummaryLength_LengthUnit_CHARACTER;
  static const LengthUnit TOKEN = SummaryLength_LengthUnit_TOKEN;
  static const LengthUnit SENTENCE = SummaryLength_LengthUnit_SENTENCE;
  static const LengthUnit NUM_LENGTH_UNITS = SummaryLength_LengthUnit_NUM_LENGTH_UNITS;
  static inline bool LengthUnit_IsValid(int value) {
    return SummaryLength_LengthUnit_IsValid(value);
  }
  static const LengthUnit LengthUnit_MIN =
    SummaryLength_LengthUnit_LengthUnit_MIN;
  static const LengthUnit LengthUnit_MAX =
    SummaryLength_LengthUnit_LengthUnit_MAX;
  static const int LengthUnit_ARRAYSIZE =
    SummaryLength_LengthUnit_LengthUnit_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LengthUnit_descriptor() {
    return SummaryLength_LengthUnit_descriptor();
  }
  static inline const ::std::string& LengthUnit_Name(LengthUnit value) {
    return SummaryLength_LengthUnit_Name(value);
  }
  static inline bool LengthUnit_Parse(const ::std::string& name,
      LengthUnit* value) {
    return SummaryLength_LengthUnit_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .topicsum.SummaryLength.LengthUnit unit = 1;
  inline bool has_unit() const;
  inline void clear_unit();
  static const int kUnitFieldNumber = 1;
  inline ::topicsum::SummaryLength_LengthUnit unit() const;
  inline void set_unit(::topicsum::SummaryLength_LengthUnit value);

  // required int32 length = 2;
  inline bool has_length() const;
  inline void clear_length();
  static const int kLengthFieldNumber = 2;
  inline ::google::protobuf::int32 length() const;
  inline void set_length(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:topicsum.SummaryLength)
 private:
  inline void set_has_unit();
  inline void clear_has_unit();
  inline void set_has_length();
  inline void clear_has_length();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int unit_;
  ::google::protobuf::int32 length_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_summarizer_2fsummarizer_2eproto();
  friend void protobuf_AssignDesc_summarizer_2fsummarizer_2eproto();
  friend void protobuf_ShutdownFile_summarizer_2fsummarizer_2eproto();

  void InitAsDefaultInstance();
  static SummaryLength* default_instance_;
};
// -------------------------------------------------------------------

class GibbsSamplingOptions : public ::google::protobuf::Message {
 public:
  GibbsSamplingOptions();
  virtual ~GibbsSamplingOptions();

  GibbsSamplingOptions(const GibbsSamplingOptions& from);

  inline GibbsSamplingOptions& operator=(const GibbsSamplingOptions& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GibbsSamplingOptions& default_instance();

  void Swap(GibbsSamplingOptions* other);

  // implements Message ----------------------------------------------

  GibbsSamplingOptions* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GibbsSamplingOptions& from);
  void MergeFrom(const GibbsSamplingOptions& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 iterations = 1 [default = 500];
  inline bool has_iterations() const;
  inline void clear_iterations();
  static const int kIterationsFieldNumber = 1;
  inline ::google::protobuf::int32 iterations() const;
  inline void set_iterations(::google::protobuf::int32 value);

  // optional int32 burnin = 2 [default = 0];
  inline bool has_burnin() const;
  inline void clear_burnin();
  static const int kBurninFieldNumber = 2;
  inline ::google::protobuf::int32 burnin() const;
  inline void set_burnin(::google::protobuf::int32 value);

  // optional int32 lag = 3 [default = 10];
  inline bool has_lag() const;
  inline void clear_lag();
  static const int kLagFieldNumber = 3;
  inline ::google::protobuf::int32 lag() const;
  inline void set_lag(::google::protobuf::int32 value);

  // optional bool track_likelihood = 4 [default = false];
  inline bool has_track_likelihood() const;
  inline void clear_track_likelihood();
  static const int kTrackLikelihoodFieldNumber = 4;
  inline bool track_likelihood() const;
  inline void set_track_likelihood(bool value);

  // @@protoc_insertion_point(class_scope:topicsum.GibbsSamplingOptions)
 private:
  inline void set_has_iterations();
  inline void clear_has_iterations();
  inline void set_has_burnin();
  inline void clear_has_burnin();
  inline void set_has_lag();
  inline void clear_has_lag();
  inline void set_has_track_likelihood();
  inline void clear_has_track_likelihood();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 iterations_;
  ::google::protobuf::int32 burnin_;
  ::google::protobuf::int32 lag_;
  bool track_likelihood_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_summarizer_2fsummarizer_2eproto();
  friend void protobuf_AssignDesc_summarizer_2fsummarizer_2eproto();
  friend void protobuf_ShutdownFile_summarizer_2fsummarizer_2eproto();

  void InitAsDefaultInstance();
  static GibbsSamplingOptions* default_instance_;
};
// -------------------------------------------------------------------

class KLSumOptions : public ::google::protobuf::Message {
 public:
  KLSumOptions();
  virtual ~KLSumOptions();

  KLSumOptions(const KLSumOptions& from);

  inline KLSumOptions& operator=(const KLSumOptions& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KLSumOptions& default_instance();

  void Swap(KLSumOptions* other);

  // implements Message ----------------------------------------------

  KLSumOptions* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KLSumOptions& from);
  void MergeFrom(const KLSumOptions& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef KLSumOptions_OptimizationStrategy OptimizationStrategy;
  static const OptimizationStrategy GREEDY_OPTIMIZATION = KLSumOptions_OptimizationStrategy_GREEDY_OPTIMIZATION;
  static const OptimizationStrategy SENTENCE_RANKING = KLSumOptions_OptimizationStrategy_SENTENCE_RANKING;
  static const OptimizationStrategy NUM_OPTIMIZATIONS = KLSumOptions_OptimizationStrategy_NUM_OPTIMIZATIONS;
  static inline bool OptimizationStrategy_IsValid(int value) {
    return KLSumOptions_OptimizationStrategy_IsValid(value);
  }
  static const OptimizationStrategy OptimizationStrategy_MIN =
    KLSumOptions_OptimizationStrategy_OptimizationStrategy_MIN;
  static const OptimizationStrategy OptimizationStrategy_MAX =
    KLSumOptions_OptimizationStrategy_OptimizationStrategy_MAX;
  static const int OptimizationStrategy_ARRAYSIZE =
    KLSumOptions_OptimizationStrategy_OptimizationStrategy_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  OptimizationStrategy_descriptor() {
    return KLSumOptions_OptimizationStrategy_descriptor();
  }
  static inline const ::std::string& OptimizationStrategy_Name(OptimizationStrategy value) {
    return KLSumOptions_OptimizationStrategy_Name(value);
  }
  static inline bool OptimizationStrategy_Parse(const ::std::string& name,
      OptimizationStrategy* value) {
    return KLSumOptions_OptimizationStrategy_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .topicsum.KLSumOptions.OptimizationStrategy optimization_strategy = 1 [default = GREEDY_OPTIMIZATION];
  inline bool has_optimization_strategy() const;
  inline void clear_optimization_strategy();
  static const int kOptimizationStrategyFieldNumber = 1;
  inline ::topicsum::KLSumOptions_OptimizationStrategy optimization_strategy() const;
  inline void set_optimization_strategy(::topicsum::KLSumOptions_OptimizationStrategy value);

  // optional bool redundancy_removal = 2 [default = false];
  inline bool has_redundancy_removal() const;
  inline void clear_redundancy_removal();
  static const int kRedundancyRemovalFieldNumber = 2;
  inline bool redundancy_removal() const;
  inline void set_redundancy_removal(bool value);

  // optional bool sentence_position = 3 [default = false];
  inline bool has_sentence_position() const;
  inline void clear_sentence_position();
  static const int kSentencePositionFieldNumber = 3;
  inline bool sentence_position() const;
  inline void set_sentence_position(bool value);

  // optional float summary_weight = 5 [default = 1];
  inline bool has_summary_weight() const;
  inline void clear_summary_weight();
  static const int kSummaryWeightFieldNumber = 5;
  inline float summary_weight() const;
  inline void set_summary_weight(float value);

  // optional float prior_weight = 6 [default = 0];
  inline bool has_prior_weight() const;
  inline void clear_prior_weight();
  static const int kPriorWeightFieldNumber = 6;
  inline float prior_weight() const;
  inline void set_prior_weight(float value);

  // optional string postprocessor_name = 7 [default = "NewsPostprocessor"];
  inline bool has_postprocessor_name() const;
  inline void clear_postprocessor_name();
  static const int kPostprocessorNameFieldNumber = 7;
  inline const ::std::string& postprocessor_name() const;
  inline void set_postprocessor_name(const ::std::string& value);
  inline void set_postprocessor_name(const char* value);
  inline void set_postprocessor_name(const char* value, size_t size);
  inline ::std::string* mutable_postprocessor_name();
  inline ::std::string* release_postprocessor_name();
  inline void set_allocated_postprocessor_name(::std::string* postprocessor_name);

  // @@protoc_insertion_point(class_scope:topicsum.KLSumOptions)
 private:
  inline void set_has_optimization_strategy();
  inline void clear_has_optimization_strategy();
  inline void set_has_redundancy_removal();
  inline void clear_has_redundancy_removal();
  inline void set_has_sentence_position();
  inline void clear_has_sentence_position();
  inline void set_has_summary_weight();
  inline void clear_has_summary_weight();
  inline void set_has_prior_weight();
  inline void clear_has_prior_weight();
  inline void set_has_postprocessor_name();
  inline void clear_has_postprocessor_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int optimization_strategy_;
  bool redundancy_removal_;
  bool sentence_position_;
  float summary_weight_;
  float prior_weight_;
  ::std::string* postprocessor_name_;
  static ::std::string* _default_postprocessor_name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_summarizer_2fsummarizer_2eproto();
  friend void protobuf_AssignDesc_summarizer_2fsummarizer_2eproto();
  friend void protobuf_ShutdownFile_summarizer_2fsummarizer_2eproto();

  void InitAsDefaultInstance();
  static KLSumOptions* default_instance_;
};
// -------------------------------------------------------------------

class TopicSumOptions : public ::google::protobuf::Message {
 public:
  TopicSumOptions();
  virtual ~TopicSumOptions();

  TopicSumOptions(const TopicSumOptions& from);

  inline TopicSumOptions& operator=(const TopicSumOptions& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TopicSumOptions& default_instance();

  void Swap(TopicSumOptions* other);

  // implements Message ----------------------------------------------

  TopicSumOptions* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TopicSumOptions& from);
  void MergeFrom(const TopicSumOptions& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .topicsum.GibbsSamplingOptions gibbs_sampling_options = 2;
  inline bool has_gibbs_sampling_options() const;
  inline void clear_gibbs_sampling_options();
  static const int kGibbsSamplingOptionsFieldNumber = 2;
  inline const ::topicsum::GibbsSamplingOptions& gibbs_sampling_options() const;
  inline ::topicsum::GibbsSamplingOptions* mutable_gibbs_sampling_options();
  inline ::topicsum::GibbsSamplingOptions* release_gibbs_sampling_options();
  inline void set_allocated_gibbs_sampling_options(::topicsum::GibbsSamplingOptions* gibbs_sampling_options);

  // optional string lambda = 3 [default = "0.1,1,1"];
  inline bool has_lambda() const;
  inline void clear_lambda();
  static const int kLambdaFieldNumber = 3;
  inline const ::std::string& lambda() const;
  inline void set_lambda(const ::std::string& value);
  inline void set_lambda(const char* value);
  inline void set_lambda(const char* value, size_t size);
  inline ::std::string* mutable_lambda();
  inline ::std::string* release_lambda();
  inline void set_allocated_lambda(::std::string* lambda);

  // optional string gamma = 4 [default = "1,5,10"];
  inline bool has_gamma() const;
  inline void clear_gamma();
  static const int kGammaFieldNumber = 4;
  inline const ::std::string& gamma() const;
  inline void set_gamma(const ::std::string& value);
  inline void set_gamma(const char* value);
  inline void set_gamma(const char* value, size_t size);
  inline ::std::string* mutable_gamma();
  inline ::std::string* release_gamma();
  inline void set_allocated_gamma(::std::string* gamma);

  // @@protoc_insertion_point(class_scope:topicsum.TopicSumOptions)
 private:
  inline void set_has_gibbs_sampling_options();
  inline void clear_has_gibbs_sampling_options();
  inline void set_has_lambda();
  inline void clear_has_lambda();
  inline void set_has_gamma();
  inline void clear_has_gamma();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::topicsum::GibbsSamplingOptions* gibbs_sampling_options_;
  ::std::string* lambda_;
  static ::std::string* _default_lambda_;
  ::std::string* gamma_;
  static ::std::string* _default_gamma_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_summarizer_2fsummarizer_2eproto();
  friend void protobuf_AssignDesc_summarizer_2fsummarizer_2eproto();
  friend void protobuf_ShutdownFile_summarizer_2fsummarizer_2eproto();

  void InitAsDefaultInstance();
  static TopicSumOptions* default_instance_;
};
// -------------------------------------------------------------------

class NewsPostProcessorOptions : public ::google::protobuf::Message {
 public:
  NewsPostProcessorOptions();
  virtual ~NewsPostProcessorOptions();

  NewsPostProcessorOptions(const NewsPostProcessorOptions& from);

  inline NewsPostProcessorOptions& operator=(const NewsPostProcessorOptions& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NewsPostProcessorOptions& default_instance();

  void Swap(NewsPostProcessorOptions* other);

  // implements Message ----------------------------------------------

  NewsPostProcessorOptions* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NewsPostProcessorOptions& from);
  void MergeFrom(const NewsPostProcessorOptions& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 min_sentence_length = 1;
  inline bool has_min_sentence_length() const;
  inline void clear_min_sentence_length();
  static const int kMinSentenceLengthFieldNumber = 1;
  inline ::google::protobuf::int32 min_sentence_length() const;
  inline void set_min_sentence_length(::google::protobuf::int32 value);

  // optional int32 max_sentence_length = 2;
  inline bool has_max_sentence_length() const;
  inline void clear_max_sentence_length();
  static const int kMaxSentenceLengthFieldNumber = 2;
  inline ::google::protobuf::int32 max_sentence_length() const;
  inline void set_max_sentence_length(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:topicsum.NewsPostProcessorOptions)
 private:
  inline void set_has_min_sentence_length();
  inline void clear_has_min_sentence_length();
  inline void set_has_max_sentence_length();
  inline void clear_has_max_sentence_length();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 min_sentence_length_;
  ::google::protobuf::int32 max_sentence_length_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_summarizer_2fsummarizer_2eproto();
  friend void protobuf_AssignDesc_summarizer_2fsummarizer_2eproto();
  friend void protobuf_ShutdownFile_summarizer_2fsummarizer_2eproto();

  void InitAsDefaultInstance();
  static NewsPostProcessorOptions* default_instance_;
};
// -------------------------------------------------------------------

class SummarizerOptions : public ::google::protobuf::Message {
 public:
  SummarizerOptions();
  virtual ~SummarizerOptions();

  SummarizerOptions(const SummarizerOptions& from);

  inline SummarizerOptions& operator=(const SummarizerOptions& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SummarizerOptions& default_instance();

  void Swap(SummarizerOptions* other);

  // implements Message ----------------------------------------------

  SummarizerOptions* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SummarizerOptions& from);
  void MergeFrom(const SummarizerOptions& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef SummarizerOptions_SummaryType SummaryType;
  static const SummaryType GENERIC = SummarizerOptions_SummaryType_GENERIC;
  static const SummaryType QUERY = SummarizerOptions_SummaryType_QUERY;
  static const SummaryType UPDATE = SummarizerOptions_SummaryType_UPDATE;
  static inline bool SummaryType_IsValid(int value) {
    return SummarizerOptions_SummaryType_IsValid(value);
  }
  static const SummaryType SummaryType_MIN =
    SummarizerOptions_SummaryType_SummaryType_MIN;
  static const SummaryType SummaryType_MAX =
    SummarizerOptions_SummaryType_SummaryType_MAX;
  static const int SummaryType_ARRAYSIZE =
    SummarizerOptions_SummaryType_SummaryType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  SummaryType_descriptor() {
    return SummarizerOptions_SummaryType_descriptor();
  }
  static inline const ::std::string& SummaryType_Name(SummaryType value) {
    return SummarizerOptions_SummaryType_Name(value);
  }
  static inline bool SummaryType_Parse(const ::std::string& name,
      SummaryType* value) {
    return SummarizerOptions_SummaryType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .topicsum.SummarizerOptions.SummaryType summary_type = 1;
  inline bool has_summary_type() const;
  inline void clear_summary_type();
  static const int kSummaryTypeFieldNumber = 1;
  inline ::topicsum::SummarizerOptions_SummaryType summary_type() const;
  inline void set_summary_type(::topicsum::SummarizerOptions_SummaryType value);

  // optional .topicsum.KLSumOptions klsum_options = 2;
  inline bool has_klsum_options() const;
  inline void clear_klsum_options();
  static const int kKlsumOptionsFieldNumber = 2;
  inline const ::topicsum::KLSumOptions& klsum_options() const;
  inline ::topicsum::KLSumOptions* mutable_klsum_options();
  inline ::topicsum::KLSumOptions* release_klsum_options();
  inline void set_allocated_klsum_options(::topicsum::KLSumOptions* klsum_options);

  // optional .topicsum.TopicSumOptions topicsum_options = 3;
  inline bool has_topicsum_options() const;
  inline void clear_topicsum_options();
  static const int kTopicsumOptionsFieldNumber = 3;
  inline const ::topicsum::TopicSumOptions& topicsum_options() const;
  inline ::topicsum::TopicSumOptions* mutable_topicsum_options();
  inline ::topicsum::TopicSumOptions* release_topicsum_options();
  inline void set_allocated_topicsum_options(::topicsum::TopicSumOptions* topicsum_options);

  // repeated .topicsum.Article article = 4;
  inline int article_size() const;
  inline void clear_article();
  static const int kArticleFieldNumber = 4;
  inline const ::topicsum::Article& article(int index) const;
  inline ::topicsum::Article* mutable_article(int index);
  inline ::topicsum::Article* add_article();
  inline const ::google::protobuf::RepeatedPtrField< ::topicsum::Article >&
      article() const;
  inline ::google::protobuf::RepeatedPtrField< ::topicsum::Article >*
      mutable_article();

  // optional .topicsum.NewsPostProcessorOptions news_postprocessor_options = 5;
  inline bool has_news_postprocessor_options() const;
  inline void clear_news_postprocessor_options();
  static const int kNewsPostprocessorOptionsFieldNumber = 5;
  inline const ::topicsum::NewsPostProcessorOptions& news_postprocessor_options() const;
  inline ::topicsum::NewsPostProcessorOptions* mutable_news_postprocessor_options();
  inline ::topicsum::NewsPostProcessorOptions* release_news_postprocessor_options();
  inline void set_allocated_news_postprocessor_options(::topicsum::NewsPostProcessorOptions* news_postprocessor_options);

  // @@protoc_insertion_point(class_scope:topicsum.SummarizerOptions)
 private:
  inline void set_has_summary_type();
  inline void clear_has_summary_type();
  inline void set_has_klsum_options();
  inline void clear_has_klsum_options();
  inline void set_has_topicsum_options();
  inline void clear_has_topicsum_options();
  inline void set_has_news_postprocessor_options();
  inline void clear_has_news_postprocessor_options();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::topicsum::KLSumOptions* klsum_options_;
  ::topicsum::TopicSumOptions* topicsum_options_;
  ::google::protobuf::RepeatedPtrField< ::topicsum::Article > article_;
  ::topicsum::NewsPostProcessorOptions* news_postprocessor_options_;
  int summary_type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_summarizer_2fsummarizer_2eproto();
  friend void protobuf_AssignDesc_summarizer_2fsummarizer_2eproto();
  friend void protobuf_ShutdownFile_summarizer_2fsummarizer_2eproto();

  void InitAsDefaultInstance();
  static SummarizerOptions* default_instance_;
};
// ===================================================================


// ===================================================================

// Article

// optional string content = 1;
inline bool Article::has_content() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Article::set_has_content() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Article::clear_has_content() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Article::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& Article::content() const {
  return *content_;
}
inline void Article::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void Article::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void Article::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Article::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* Article::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Article::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated float score = 2;
inline int Article::score_size() const {
  return score_.size();
}
inline void Article::clear_score() {
  score_.Clear();
}
inline float Article::score(int index) const {
  return score_.Get(index);
}
inline void Article::set_score(int index, float value) {
  score_.Set(index, value);
}
inline void Article::add_score(float value) {
  score_.Add(value);
}
inline const ::google::protobuf::RepeatedField< float >&
Article::score() const {
  return score_;
}
inline ::google::protobuf::RepeatedField< float >*
Article::mutable_score() {
  return &score_;
}

// -------------------------------------------------------------------

// SummaryOptions

// optional .topicsum.SummaryLength length = 1;
inline bool SummaryOptions::has_length() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SummaryOptions::set_has_length() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SummaryOptions::clear_has_length() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SummaryOptions::clear_length() {
  if (length_ != NULL) length_->::topicsum::SummaryLength::Clear();
  clear_has_length();
}
inline const ::topicsum::SummaryLength& SummaryOptions::length() const {
  return length_ != NULL ? *length_ : *default_instance_->length_;
}
inline ::topicsum::SummaryLength* SummaryOptions::mutable_length() {
  set_has_length();
  if (length_ == NULL) length_ = new ::topicsum::SummaryLength;
  return length_;
}
inline ::topicsum::SummaryLength* SummaryOptions::release_length() {
  clear_has_length();
  ::topicsum::SummaryLength* temp = length_;
  length_ = NULL;
  return temp;
}
inline void SummaryOptions::set_allocated_length(::topicsum::SummaryLength* length) {
  delete length_;
  length_ = length;
  if (length) {
    set_has_length();
  } else {
    clear_has_length();
  }
}

// optional bool generate_debug = 8 [default = false];
inline bool SummaryOptions::has_generate_debug() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SummaryOptions::set_has_generate_debug() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SummaryOptions::clear_has_generate_debug() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SummaryOptions::clear_generate_debug() {
  generate_debug_ = false;
  clear_has_generate_debug();
}
inline bool SummaryOptions::generate_debug() const {
  return generate_debug_;
}
inline void SummaryOptions::set_generate_debug(bool value) {
  set_has_generate_debug();
  generate_debug_ = value;
}

// -------------------------------------------------------------------

// SummaryLength

// required .topicsum.SummaryLength.LengthUnit unit = 1;
inline bool SummaryLength::has_unit() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SummaryLength::set_has_unit() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SummaryLength::clear_has_unit() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SummaryLength::clear_unit() {
  unit_ = 0;
  clear_has_unit();
}
inline ::topicsum::SummaryLength_LengthUnit SummaryLength::unit() const {
  return static_cast< ::topicsum::SummaryLength_LengthUnit >(unit_);
}
inline void SummaryLength::set_unit(::topicsum::SummaryLength_LengthUnit value) {
  assert(::topicsum::SummaryLength_LengthUnit_IsValid(value));
  set_has_unit();
  unit_ = value;
}

// required int32 length = 2;
inline bool SummaryLength::has_length() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SummaryLength::set_has_length() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SummaryLength::clear_has_length() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SummaryLength::clear_length() {
  length_ = 0;
  clear_has_length();
}
inline ::google::protobuf::int32 SummaryLength::length() const {
  return length_;
}
inline void SummaryLength::set_length(::google::protobuf::int32 value) {
  set_has_length();
  length_ = value;
}

// -------------------------------------------------------------------

// GibbsSamplingOptions

// optional int32 iterations = 1 [default = 500];
inline bool GibbsSamplingOptions::has_iterations() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GibbsSamplingOptions::set_has_iterations() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GibbsSamplingOptions::clear_has_iterations() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GibbsSamplingOptions::clear_iterations() {
  iterations_ = 500;
  clear_has_iterations();
}
inline ::google::protobuf::int32 GibbsSamplingOptions::iterations() const {
  return iterations_;
}
inline void GibbsSamplingOptions::set_iterations(::google::protobuf::int32 value) {
  set_has_iterations();
  iterations_ = value;
}

// optional int32 burnin = 2 [default = 0];
inline bool GibbsSamplingOptions::has_burnin() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GibbsSamplingOptions::set_has_burnin() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GibbsSamplingOptions::clear_has_burnin() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GibbsSamplingOptions::clear_burnin() {
  burnin_ = 0;
  clear_has_burnin();
}
inline ::google::protobuf::int32 GibbsSamplingOptions::burnin() const {
  return burnin_;
}
inline void GibbsSamplingOptions::set_burnin(::google::protobuf::int32 value) {
  set_has_burnin();
  burnin_ = value;
}

// optional int32 lag = 3 [default = 10];
inline bool GibbsSamplingOptions::has_lag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GibbsSamplingOptions::set_has_lag() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GibbsSamplingOptions::clear_has_lag() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GibbsSamplingOptions::clear_lag() {
  lag_ = 10;
  clear_has_lag();
}
inline ::google::protobuf::int32 GibbsSamplingOptions::lag() const {
  return lag_;
}
inline void GibbsSamplingOptions::set_lag(::google::protobuf::int32 value) {
  set_has_lag();
  lag_ = value;
}

// optional bool track_likelihood = 4 [default = false];
inline bool GibbsSamplingOptions::has_track_likelihood() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GibbsSamplingOptions::set_has_track_likelihood() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GibbsSamplingOptions::clear_has_track_likelihood() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GibbsSamplingOptions::clear_track_likelihood() {
  track_likelihood_ = false;
  clear_has_track_likelihood();
}
inline bool GibbsSamplingOptions::track_likelihood() const {
  return track_likelihood_;
}
inline void GibbsSamplingOptions::set_track_likelihood(bool value) {
  set_has_track_likelihood();
  track_likelihood_ = value;
}

// -------------------------------------------------------------------

// KLSumOptions

// optional .topicsum.KLSumOptions.OptimizationStrategy optimization_strategy = 1 [default = GREEDY_OPTIMIZATION];
inline bool KLSumOptions::has_optimization_strategy() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KLSumOptions::set_has_optimization_strategy() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KLSumOptions::clear_has_optimization_strategy() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KLSumOptions::clear_optimization_strategy() {
  optimization_strategy_ = 0;
  clear_has_optimization_strategy();
}
inline ::topicsum::KLSumOptions_OptimizationStrategy KLSumOptions::optimization_strategy() const {
  return static_cast< ::topicsum::KLSumOptions_OptimizationStrategy >(optimization_strategy_);
}
inline void KLSumOptions::set_optimization_strategy(::topicsum::KLSumOptions_OptimizationStrategy value) {
  assert(::topicsum::KLSumOptions_OptimizationStrategy_IsValid(value));
  set_has_optimization_strategy();
  optimization_strategy_ = value;
}

// optional bool redundancy_removal = 2 [default = false];
inline bool KLSumOptions::has_redundancy_removal() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void KLSumOptions::set_has_redundancy_removal() {
  _has_bits_[0] |= 0x00000002u;
}
inline void KLSumOptions::clear_has_redundancy_removal() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void KLSumOptions::clear_redundancy_removal() {
  redundancy_removal_ = false;
  clear_has_redundancy_removal();
}
inline bool KLSumOptions::redundancy_removal() const {
  return redundancy_removal_;
}
inline void KLSumOptions::set_redundancy_removal(bool value) {
  set_has_redundancy_removal();
  redundancy_removal_ = value;
}

// optional bool sentence_position = 3 [default = false];
inline bool KLSumOptions::has_sentence_position() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void KLSumOptions::set_has_sentence_position() {
  _has_bits_[0] |= 0x00000004u;
}
inline void KLSumOptions::clear_has_sentence_position() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void KLSumOptions::clear_sentence_position() {
  sentence_position_ = false;
  clear_has_sentence_position();
}
inline bool KLSumOptions::sentence_position() const {
  return sentence_position_;
}
inline void KLSumOptions::set_sentence_position(bool value) {
  set_has_sentence_position();
  sentence_position_ = value;
}

// optional float summary_weight = 5 [default = 1];
inline bool KLSumOptions::has_summary_weight() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void KLSumOptions::set_has_summary_weight() {
  _has_bits_[0] |= 0x00000008u;
}
inline void KLSumOptions::clear_has_summary_weight() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void KLSumOptions::clear_summary_weight() {
  summary_weight_ = 1;
  clear_has_summary_weight();
}
inline float KLSumOptions::summary_weight() const {
  return summary_weight_;
}
inline void KLSumOptions::set_summary_weight(float value) {
  set_has_summary_weight();
  summary_weight_ = value;
}

// optional float prior_weight = 6 [default = 0];
inline bool KLSumOptions::has_prior_weight() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void KLSumOptions::set_has_prior_weight() {
  _has_bits_[0] |= 0x00000010u;
}
inline void KLSumOptions::clear_has_prior_weight() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void KLSumOptions::clear_prior_weight() {
  prior_weight_ = 0;
  clear_has_prior_weight();
}
inline float KLSumOptions::prior_weight() const {
  return prior_weight_;
}
inline void KLSumOptions::set_prior_weight(float value) {
  set_has_prior_weight();
  prior_weight_ = value;
}

// optional string postprocessor_name = 7 [default = "NewsPostprocessor"];
inline bool KLSumOptions::has_postprocessor_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void KLSumOptions::set_has_postprocessor_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void KLSumOptions::clear_has_postprocessor_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void KLSumOptions::clear_postprocessor_name() {
  if (postprocessor_name_ != _default_postprocessor_name_) {
    postprocessor_name_->assign(*_default_postprocessor_name_);
  }
  clear_has_postprocessor_name();
}
inline const ::std::string& KLSumOptions::postprocessor_name() const {
  return *postprocessor_name_;
}
inline void KLSumOptions::set_postprocessor_name(const ::std::string& value) {
  set_has_postprocessor_name();
  if (postprocessor_name_ == _default_postprocessor_name_) {
    postprocessor_name_ = new ::std::string;
  }
  postprocessor_name_->assign(value);
}
inline void KLSumOptions::set_postprocessor_name(const char* value) {
  set_has_postprocessor_name();
  if (postprocessor_name_ == _default_postprocessor_name_) {
    postprocessor_name_ = new ::std::string;
  }
  postprocessor_name_->assign(value);
}
inline void KLSumOptions::set_postprocessor_name(const char* value, size_t size) {
  set_has_postprocessor_name();
  if (postprocessor_name_ == _default_postprocessor_name_) {
    postprocessor_name_ = new ::std::string;
  }
  postprocessor_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* KLSumOptions::mutable_postprocessor_name() {
  set_has_postprocessor_name();
  if (postprocessor_name_ == _default_postprocessor_name_) {
    postprocessor_name_ = new ::std::string(*_default_postprocessor_name_);
  }
  return postprocessor_name_;
}
inline ::std::string* KLSumOptions::release_postprocessor_name() {
  clear_has_postprocessor_name();
  if (postprocessor_name_ == _default_postprocessor_name_) {
    return NULL;
  } else {
    ::std::string* temp = postprocessor_name_;
    postprocessor_name_ = const_cast< ::std::string*>(_default_postprocessor_name_);
    return temp;
  }
}
inline void KLSumOptions::set_allocated_postprocessor_name(::std::string* postprocessor_name) {
  if (postprocessor_name_ != _default_postprocessor_name_) {
    delete postprocessor_name_;
  }
  if (postprocessor_name) {
    set_has_postprocessor_name();
    postprocessor_name_ = postprocessor_name;
  } else {
    clear_has_postprocessor_name();
    postprocessor_name_ = const_cast< ::std::string*>(_default_postprocessor_name_);
  }
}

// -------------------------------------------------------------------

// TopicSumOptions

// optional .topicsum.GibbsSamplingOptions gibbs_sampling_options = 2;
inline bool TopicSumOptions::has_gibbs_sampling_options() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TopicSumOptions::set_has_gibbs_sampling_options() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TopicSumOptions::clear_has_gibbs_sampling_options() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TopicSumOptions::clear_gibbs_sampling_options() {
  if (gibbs_sampling_options_ != NULL) gibbs_sampling_options_->::topicsum::GibbsSamplingOptions::Clear();
  clear_has_gibbs_sampling_options();
}
inline const ::topicsum::GibbsSamplingOptions& TopicSumOptions::gibbs_sampling_options() const {
  return gibbs_sampling_options_ != NULL ? *gibbs_sampling_options_ : *default_instance_->gibbs_sampling_options_;
}
inline ::topicsum::GibbsSamplingOptions* TopicSumOptions::mutable_gibbs_sampling_options() {
  set_has_gibbs_sampling_options();
  if (gibbs_sampling_options_ == NULL) gibbs_sampling_options_ = new ::topicsum::GibbsSamplingOptions;
  return gibbs_sampling_options_;
}
inline ::topicsum::GibbsSamplingOptions* TopicSumOptions::release_gibbs_sampling_options() {
  clear_has_gibbs_sampling_options();
  ::topicsum::GibbsSamplingOptions* temp = gibbs_sampling_options_;
  gibbs_sampling_options_ = NULL;
  return temp;
}
inline void TopicSumOptions::set_allocated_gibbs_sampling_options(::topicsum::GibbsSamplingOptions* gibbs_sampling_options) {
  delete gibbs_sampling_options_;
  gibbs_sampling_options_ = gibbs_sampling_options;
  if (gibbs_sampling_options) {
    set_has_gibbs_sampling_options();
  } else {
    clear_has_gibbs_sampling_options();
  }
}

// optional string lambda = 3 [default = "0.1,1,1"];
inline bool TopicSumOptions::has_lambda() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TopicSumOptions::set_has_lambda() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TopicSumOptions::clear_has_lambda() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TopicSumOptions::clear_lambda() {
  if (lambda_ != _default_lambda_) {
    lambda_->assign(*_default_lambda_);
  }
  clear_has_lambda();
}
inline const ::std::string& TopicSumOptions::lambda() const {
  return *lambda_;
}
inline void TopicSumOptions::set_lambda(const ::std::string& value) {
  set_has_lambda();
  if (lambda_ == _default_lambda_) {
    lambda_ = new ::std::string;
  }
  lambda_->assign(value);
}
inline void TopicSumOptions::set_lambda(const char* value) {
  set_has_lambda();
  if (lambda_ == _default_lambda_) {
    lambda_ = new ::std::string;
  }
  lambda_->assign(value);
}
inline void TopicSumOptions::set_lambda(const char* value, size_t size) {
  set_has_lambda();
  if (lambda_ == _default_lambda_) {
    lambda_ = new ::std::string;
  }
  lambda_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TopicSumOptions::mutable_lambda() {
  set_has_lambda();
  if (lambda_ == _default_lambda_) {
    lambda_ = new ::std::string(*_default_lambda_);
  }
  return lambda_;
}
inline ::std::string* TopicSumOptions::release_lambda() {
  clear_has_lambda();
  if (lambda_ == _default_lambda_) {
    return NULL;
  } else {
    ::std::string* temp = lambda_;
    lambda_ = const_cast< ::std::string*>(_default_lambda_);
    return temp;
  }
}
inline void TopicSumOptions::set_allocated_lambda(::std::string* lambda) {
  if (lambda_ != _default_lambda_) {
    delete lambda_;
  }
  if (lambda) {
    set_has_lambda();
    lambda_ = lambda;
  } else {
    clear_has_lambda();
    lambda_ = const_cast< ::std::string*>(_default_lambda_);
  }
}

// optional string gamma = 4 [default = "1,5,10"];
inline bool TopicSumOptions::has_gamma() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TopicSumOptions::set_has_gamma() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TopicSumOptions::clear_has_gamma() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TopicSumOptions::clear_gamma() {
  if (gamma_ != _default_gamma_) {
    gamma_->assign(*_default_gamma_);
  }
  clear_has_gamma();
}
inline const ::std::string& TopicSumOptions::gamma() const {
  return *gamma_;
}
inline void TopicSumOptions::set_gamma(const ::std::string& value) {
  set_has_gamma();
  if (gamma_ == _default_gamma_) {
    gamma_ = new ::std::string;
  }
  gamma_->assign(value);
}
inline void TopicSumOptions::set_gamma(const char* value) {
  set_has_gamma();
  if (gamma_ == _default_gamma_) {
    gamma_ = new ::std::string;
  }
  gamma_->assign(value);
}
inline void TopicSumOptions::set_gamma(const char* value, size_t size) {
  set_has_gamma();
  if (gamma_ == _default_gamma_) {
    gamma_ = new ::std::string;
  }
  gamma_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TopicSumOptions::mutable_gamma() {
  set_has_gamma();
  if (gamma_ == _default_gamma_) {
    gamma_ = new ::std::string(*_default_gamma_);
  }
  return gamma_;
}
inline ::std::string* TopicSumOptions::release_gamma() {
  clear_has_gamma();
  if (gamma_ == _default_gamma_) {
    return NULL;
  } else {
    ::std::string* temp = gamma_;
    gamma_ = const_cast< ::std::string*>(_default_gamma_);
    return temp;
  }
}
inline void TopicSumOptions::set_allocated_gamma(::std::string* gamma) {
  if (gamma_ != _default_gamma_) {
    delete gamma_;
  }
  if (gamma) {
    set_has_gamma();
    gamma_ = gamma;
  } else {
    clear_has_gamma();
    gamma_ = const_cast< ::std::string*>(_default_gamma_);
  }
}

// -------------------------------------------------------------------

// NewsPostProcessorOptions

// optional int32 min_sentence_length = 1;
inline bool NewsPostProcessorOptions::has_min_sentence_length() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NewsPostProcessorOptions::set_has_min_sentence_length() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NewsPostProcessorOptions::clear_has_min_sentence_length() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NewsPostProcessorOptions::clear_min_sentence_length() {
  min_sentence_length_ = 0;
  clear_has_min_sentence_length();
}
inline ::google::protobuf::int32 NewsPostProcessorOptions::min_sentence_length() const {
  return min_sentence_length_;
}
inline void NewsPostProcessorOptions::set_min_sentence_length(::google::protobuf::int32 value) {
  set_has_min_sentence_length();
  min_sentence_length_ = value;
}

// optional int32 max_sentence_length = 2;
inline bool NewsPostProcessorOptions::has_max_sentence_length() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NewsPostProcessorOptions::set_has_max_sentence_length() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NewsPostProcessorOptions::clear_has_max_sentence_length() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NewsPostProcessorOptions::clear_max_sentence_length() {
  max_sentence_length_ = 0;
  clear_has_max_sentence_length();
}
inline ::google::protobuf::int32 NewsPostProcessorOptions::max_sentence_length() const {
  return max_sentence_length_;
}
inline void NewsPostProcessorOptions::set_max_sentence_length(::google::protobuf::int32 value) {
  set_has_max_sentence_length();
  max_sentence_length_ = value;
}

// -------------------------------------------------------------------

// SummarizerOptions

// required .topicsum.SummarizerOptions.SummaryType summary_type = 1;
inline bool SummarizerOptions::has_summary_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SummarizerOptions::set_has_summary_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SummarizerOptions::clear_has_summary_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SummarizerOptions::clear_summary_type() {
  summary_type_ = 1;
  clear_has_summary_type();
}
inline ::topicsum::SummarizerOptions_SummaryType SummarizerOptions::summary_type() const {
  return static_cast< ::topicsum::SummarizerOptions_SummaryType >(summary_type_);
}
inline void SummarizerOptions::set_summary_type(::topicsum::SummarizerOptions_SummaryType value) {
  assert(::topicsum::SummarizerOptions_SummaryType_IsValid(value));
  set_has_summary_type();
  summary_type_ = value;
}

// optional .topicsum.KLSumOptions klsum_options = 2;
inline bool SummarizerOptions::has_klsum_options() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SummarizerOptions::set_has_klsum_options() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SummarizerOptions::clear_has_klsum_options() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SummarizerOptions::clear_klsum_options() {
  if (klsum_options_ != NULL) klsum_options_->::topicsum::KLSumOptions::Clear();
  clear_has_klsum_options();
}
inline const ::topicsum::KLSumOptions& SummarizerOptions::klsum_options() const {
  return klsum_options_ != NULL ? *klsum_options_ : *default_instance_->klsum_options_;
}
inline ::topicsum::KLSumOptions* SummarizerOptions::mutable_klsum_options() {
  set_has_klsum_options();
  if (klsum_options_ == NULL) klsum_options_ = new ::topicsum::KLSumOptions;
  return klsum_options_;
}
inline ::topicsum::KLSumOptions* SummarizerOptions::release_klsum_options() {
  clear_has_klsum_options();
  ::topicsum::KLSumOptions* temp = klsum_options_;
  klsum_options_ = NULL;
  return temp;
}
inline void SummarizerOptions::set_allocated_klsum_options(::topicsum::KLSumOptions* klsum_options) {
  delete klsum_options_;
  klsum_options_ = klsum_options;
  if (klsum_options) {
    set_has_klsum_options();
  } else {
    clear_has_klsum_options();
  }
}

// optional .topicsum.TopicSumOptions topicsum_options = 3;
inline bool SummarizerOptions::has_topicsum_options() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SummarizerOptions::set_has_topicsum_options() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SummarizerOptions::clear_has_topicsum_options() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SummarizerOptions::clear_topicsum_options() {
  if (topicsum_options_ != NULL) topicsum_options_->::topicsum::TopicSumOptions::Clear();
  clear_has_topicsum_options();
}
inline const ::topicsum::TopicSumOptions& SummarizerOptions::topicsum_options() const {
  return topicsum_options_ != NULL ? *topicsum_options_ : *default_instance_->topicsum_options_;
}
inline ::topicsum::TopicSumOptions* SummarizerOptions::mutable_topicsum_options() {
  set_has_topicsum_options();
  if (topicsum_options_ == NULL) topicsum_options_ = new ::topicsum::TopicSumOptions;
  return topicsum_options_;
}
inline ::topicsum::TopicSumOptions* SummarizerOptions::release_topicsum_options() {
  clear_has_topicsum_options();
  ::topicsum::TopicSumOptions* temp = topicsum_options_;
  topicsum_options_ = NULL;
  return temp;
}
inline void SummarizerOptions::set_allocated_topicsum_options(::topicsum::TopicSumOptions* topicsum_options) {
  delete topicsum_options_;
  topicsum_options_ = topicsum_options;
  if (topicsum_options) {
    set_has_topicsum_options();
  } else {
    clear_has_topicsum_options();
  }
}

// repeated .topicsum.Article article = 4;
inline int SummarizerOptions::article_size() const {
  return article_.size();
}
inline void SummarizerOptions::clear_article() {
  article_.Clear();
}
inline const ::topicsum::Article& SummarizerOptions::article(int index) const {
  return article_.Get(index);
}
inline ::topicsum::Article* SummarizerOptions::mutable_article(int index) {
  return article_.Mutable(index);
}
inline ::topicsum::Article* SummarizerOptions::add_article() {
  return article_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::topicsum::Article >&
SummarizerOptions::article() const {
  return article_;
}
inline ::google::protobuf::RepeatedPtrField< ::topicsum::Article >*
SummarizerOptions::mutable_article() {
  return &article_;
}

// optional .topicsum.NewsPostProcessorOptions news_postprocessor_options = 5;
inline bool SummarizerOptions::has_news_postprocessor_options() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SummarizerOptions::set_has_news_postprocessor_options() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SummarizerOptions::clear_has_news_postprocessor_options() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SummarizerOptions::clear_news_postprocessor_options() {
  if (news_postprocessor_options_ != NULL) news_postprocessor_options_->::topicsum::NewsPostProcessorOptions::Clear();
  clear_has_news_postprocessor_options();
}
inline const ::topicsum::NewsPostProcessorOptions& SummarizerOptions::news_postprocessor_options() const {
  return news_postprocessor_options_ != NULL ? *news_postprocessor_options_ : *default_instance_->news_postprocessor_options_;
}
inline ::topicsum::NewsPostProcessorOptions* SummarizerOptions::mutable_news_postprocessor_options() {
  set_has_news_postprocessor_options();
  if (news_postprocessor_options_ == NULL) news_postprocessor_options_ = new ::topicsum::NewsPostProcessorOptions;
  return news_postprocessor_options_;
}
inline ::topicsum::NewsPostProcessorOptions* SummarizerOptions::release_news_postprocessor_options() {
  clear_has_news_postprocessor_options();
  ::topicsum::NewsPostProcessorOptions* temp = news_postprocessor_options_;
  news_postprocessor_options_ = NULL;
  return temp;
}
inline void SummarizerOptions::set_allocated_news_postprocessor_options(::topicsum::NewsPostProcessorOptions* news_postprocessor_options) {
  delete news_postprocessor_options_;
  news_postprocessor_options_ = news_postprocessor_options;
  if (news_postprocessor_options) {
    set_has_news_postprocessor_options();
  } else {
    clear_has_news_postprocessor_options();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace topicsum

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::topicsum::SummaryLength_LengthUnit>() {
  return ::topicsum::SummaryLength_LengthUnit_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::topicsum::KLSumOptions_OptimizationStrategy>() {
  return ::topicsum::KLSumOptions_OptimizationStrategy_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::topicsum::SummarizerOptions_SummaryType>() {
  return ::topicsum::SummarizerOptions_SummaryType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_summarizer_2fsummarizer_2eproto__INCLUDED
