// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: summarizer/document.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "summarizer/document.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace topicsum {

namespace {

const ::google::protobuf::Descriptor* Sentence_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sentence_reflection_ = NULL;
const ::google::protobuf::Descriptor* Document_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Document_reflection_ = NULL;
const ::google::protobuf::Descriptor* DocumentCollection_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DocumentCollection_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_summarizer_2fdocument_2eproto() {
  protobuf_AddDesc_summarizer_2fdocument_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "summarizer/document.proto");
  GOOGLE_CHECK(file != NULL);
  Sentence_descriptor_ = file->message_type(0);
  static const int Sentence_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sentence, raw_content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sentence, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sentence, pos_tag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sentence, prior_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sentence, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sentence, source_document_),
  };
  Sentence_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sentence_descriptor_,
      Sentence::default_instance_,
      Sentence_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sentence, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sentence, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sentence));
  Document_descriptor_ = file->message_type(1);
  static const int Document_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, description_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, raw_content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, publication_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, sentence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, num_tokens_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, title_sentence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, num_title_tokens_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, debug_string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, dual_),
  };
  Document_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Document_descriptor_,
      Document::default_instance_,
      Document_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Document, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Document));
  DocumentCollection_descriptor_ = file->message_type(2);
  static const int DocumentCollection_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentCollection, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentCollection, document_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentCollection, num_sentences_),
  };
  DocumentCollection_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DocumentCollection_descriptor_,
      DocumentCollection::default_instance_,
      DocumentCollection_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentCollection, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DocumentCollection, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DocumentCollection));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_summarizer_2fdocument_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sentence_descriptor_, &Sentence::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Document_descriptor_, &Document::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DocumentCollection_descriptor_, &DocumentCollection::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_summarizer_2fdocument_2eproto() {
  delete Sentence::default_instance_;
  delete Sentence_reflection_;
  delete Document::default_instance_;
  delete Document_reflection_;
  delete DocumentCollection::default_instance_;
  delete DocumentCollection_reflection_;
}

void protobuf_AddDesc_summarizer_2fdocument_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031summarizer/document.proto\022\010topicsum\"|\n"
    "\010Sentence\022\023\n\013raw_content\030\001 \001(\t\022\r\n\005token\030"
    "\002 \003(\t\022\017\n\007pos_tag\030\005 \003(\t\022\023\n\013prior_score\030\010 "
    "\001(\002\022\r\n\005score\030\003 \001(\002\022\027\n\017source_document\030\004 "
    "\001(\t\"\224\002\n\010Document\022\n\n\002id\030\t \001(\t\022\r\n\005title\030\001 "
    "\001(\t\022\023\n\013description\030\r \001(\t\022\023\n\013raw_content\030"
    "\002 \001(\t\022\030\n\020publication_date\030\003 \001(\003\022$\n\010sente"
    "nce\030\004 \003(\0132\022.topicsum.Sentence\022\022\n\nnum_tok"
    "ens\030\006 \001(\003\022*\n\016title_sentence\030\013 \003(\0132\022.topi"
    "csum.Sentence\022\030\n\020num_title_tokens\030\014 \001(\003\022"
    "\024\n\014debug_string\030\007 \001(\t\022\023\n\004dual\030\010 \001(\010:\005fal"
    "se\"]\n\022DocumentCollection\022\n\n\002id\030\001 \001(\t\022$\n\010"
    "document\030\002 \003(\0132\022.topicsum.Document\022\025\n\rnu"
    "m_sentences\030\003 \001(\003", 537);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "summarizer/document.proto", &protobuf_RegisterTypes);
  Sentence::default_instance_ = new Sentence();
  Document::default_instance_ = new Document();
  DocumentCollection::default_instance_ = new DocumentCollection();
  Sentence::default_instance_->InitAsDefaultInstance();
  Document::default_instance_->InitAsDefaultInstance();
  DocumentCollection::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_summarizer_2fdocument_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_summarizer_2fdocument_2eproto {
  StaticDescriptorInitializer_summarizer_2fdocument_2eproto() {
    protobuf_AddDesc_summarizer_2fdocument_2eproto();
  }
} static_descriptor_initializer_summarizer_2fdocument_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Sentence::kRawContentFieldNumber;
const int Sentence::kTokenFieldNumber;
const int Sentence::kPosTagFieldNumber;
const int Sentence::kPriorScoreFieldNumber;
const int Sentence::kScoreFieldNumber;
const int Sentence::kSourceDocumentFieldNumber;
#endif  // !_MSC_VER

Sentence::Sentence()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sentence::InitAsDefaultInstance() {
}

Sentence::Sentence(const Sentence& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sentence::SharedCtor() {
  _cached_size_ = 0;
  raw_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  prior_score_ = 0;
  score_ = 0;
  source_document_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sentence::~Sentence() {
  SharedDtor();
}

void Sentence::SharedDtor() {
  if (raw_content_ != &::google::protobuf::internal::kEmptyString) {
    delete raw_content_;
  }
  if (source_document_ != &::google::protobuf::internal::kEmptyString) {
    delete source_document_;
  }
  if (this != default_instance_) {
  }
}

void Sentence::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sentence::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sentence_descriptor_;
}

const Sentence& Sentence::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_summarizer_2fdocument_2eproto();
  return *default_instance_;
}

Sentence* Sentence::default_instance_ = NULL;

Sentence* Sentence::New() const {
  return new Sentence;
}

void Sentence::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_raw_content()) {
      if (raw_content_ != &::google::protobuf::internal::kEmptyString) {
        raw_content_->clear();
      }
    }
    prior_score_ = 0;
    score_ = 0;
    if (has_source_document()) {
      if (source_document_ != &::google::protobuf::internal::kEmptyString) {
        source_document_->clear();
      }
    }
  }
  token_.Clear();
  pos_tag_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sentence::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string raw_content = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_raw_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->raw_content().data(), this->raw_content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_token;
        break;
      }

      // repeated string token = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_token:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token(this->token_size() - 1).data(),
            this->token(this->token_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_token;
        if (input->ExpectTag(29)) goto parse_score;
        break;
      }

      // optional float score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_source_document;
        break;
      }

      // optional string source_document = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_source_document:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source_document()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->source_document().data(), this->source_document().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_pos_tag;
        break;
      }

      // repeated string pos_tag = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos_tag:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_pos_tag()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pos_tag(this->pos_tag_size() - 1).data(),
            this->pos_tag(this->pos_tag_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_pos_tag;
        if (input->ExpectTag(69)) goto parse_prior_score;
        break;
      }

      // optional float prior_score = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_prior_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &prior_score_)));
          set_has_prior_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sentence::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string raw_content = 1;
  if (has_raw_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->raw_content().data(), this->raw_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->raw_content(), output);
  }

  // repeated string token = 2;
  for (int i = 0; i < this->token_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->token(i).data(), this->token(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->token(i), output);
  }

  // optional float score = 3;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->score(), output);
  }

  // optional string source_document = 4;
  if (has_source_document()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->source_document().data(), this->source_document().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->source_document(), output);
  }

  // repeated string pos_tag = 5;
  for (int i = 0; i < this->pos_tag_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->pos_tag(i).data(), this->pos_tag(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->pos_tag(i), output);
  }

  // optional float prior_score = 8;
  if (has_prior_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->prior_score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sentence::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string raw_content = 1;
  if (has_raw_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->raw_content().data(), this->raw_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->raw_content(), target);
  }

  // repeated string token = 2;
  for (int i = 0; i < this->token_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token(i).data(), this->token(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->token(i), target);
  }

  // optional float score = 3;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->score(), target);
  }

  // optional string source_document = 4;
  if (has_source_document()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->source_document().data(), this->source_document().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->source_document(), target);
  }

  // repeated string pos_tag = 5;
  for (int i = 0; i < this->pos_tag_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pos_tag(i).data(), this->pos_tag(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->pos_tag(i), target);
  }

  // optional float prior_score = 8;
  if (has_prior_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->prior_score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sentence::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string raw_content = 1;
    if (has_raw_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->raw_content());
    }

    // optional float prior_score = 8;
    if (has_prior_score()) {
      total_size += 1 + 4;
    }

    // optional float score = 3;
    if (has_score()) {
      total_size += 1 + 4;
    }

    // optional string source_document = 4;
    if (has_source_document()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source_document());
    }

  }
  // repeated string token = 2;
  total_size += 1 * this->token_size();
  for (int i = 0; i < this->token_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->token(i));
  }

  // repeated string pos_tag = 5;
  total_size += 1 * this->pos_tag_size();
  for (int i = 0; i < this->pos_tag_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->pos_tag(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sentence::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sentence* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sentence*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sentence::MergeFrom(const Sentence& from) {
  GOOGLE_CHECK_NE(&from, this);
  token_.MergeFrom(from.token_);
  pos_tag_.MergeFrom(from.pos_tag_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_raw_content()) {
      set_raw_content(from.raw_content());
    }
    if (from.has_prior_score()) {
      set_prior_score(from.prior_score());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_source_document()) {
      set_source_document(from.source_document());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sentence::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sentence::CopyFrom(const Sentence& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sentence::IsInitialized() const {

  return true;
}

void Sentence::Swap(Sentence* other) {
  if (other != this) {
    std::swap(raw_content_, other->raw_content_);
    token_.Swap(&other->token_);
    pos_tag_.Swap(&other->pos_tag_);
    std::swap(prior_score_, other->prior_score_);
    std::swap(score_, other->score_);
    std::swap(source_document_, other->source_document_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sentence::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sentence_descriptor_;
  metadata.reflection = Sentence_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Document::kIdFieldNumber;
const int Document::kTitleFieldNumber;
const int Document::kDescriptionFieldNumber;
const int Document::kRawContentFieldNumber;
const int Document::kPublicationDateFieldNumber;
const int Document::kSentenceFieldNumber;
const int Document::kNumTokensFieldNumber;
const int Document::kTitleSentenceFieldNumber;
const int Document::kNumTitleTokensFieldNumber;
const int Document::kDebugStringFieldNumber;
const int Document::kDualFieldNumber;
#endif  // !_MSC_VER

Document::Document()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Document::InitAsDefaultInstance() {
}

Document::Document(const Document& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Document::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  description_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  raw_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  publication_date_ = GOOGLE_LONGLONG(0);
  num_tokens_ = GOOGLE_LONGLONG(0);
  num_title_tokens_ = GOOGLE_LONGLONG(0);
  debug_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dual_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Document::~Document() {
  SharedDtor();
}

void Document::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (description_ != &::google::protobuf::internal::kEmptyString) {
    delete description_;
  }
  if (raw_content_ != &::google::protobuf::internal::kEmptyString) {
    delete raw_content_;
  }
  if (debug_string_ != &::google::protobuf::internal::kEmptyString) {
    delete debug_string_;
  }
  if (this != default_instance_) {
  }
}

void Document::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Document::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Document_descriptor_;
}

const Document& Document::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_summarizer_2fdocument_2eproto();
  return *default_instance_;
}

Document* Document::default_instance_ = NULL;

Document* Document::New() const {
  return new Document;
}

void Document::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    if (has_title()) {
      if (title_ != &::google::protobuf::internal::kEmptyString) {
        title_->clear();
      }
    }
    if (has_description()) {
      if (description_ != &::google::protobuf::internal::kEmptyString) {
        description_->clear();
      }
    }
    if (has_raw_content()) {
      if (raw_content_ != &::google::protobuf::internal::kEmptyString) {
        raw_content_->clear();
      }
    }
    publication_date_ = GOOGLE_LONGLONG(0);
    num_tokens_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    num_title_tokens_ = GOOGLE_LONGLONG(0);
    if (has_debug_string()) {
      if (debug_string_ != &::google::protobuf::internal::kEmptyString) {
        debug_string_->clear();
      }
    }
    dual_ = false;
  }
  sentence_.Clear();
  title_sentence_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Document::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string title = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_raw_content;
        break;
      }

      // optional string raw_content = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_raw_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_raw_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->raw_content().data(), this->raw_content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_publication_date;
        break;
      }

      // optional int64 publication_date = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_publication_date:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &publication_date_)));
          set_has_publication_date();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sentence;
        break;
      }

      // repeated .topicsum.Sentence sentence = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sentence:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sentence()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sentence;
        if (input->ExpectTag(48)) goto parse_num_tokens;
        break;
      }

      // optional int64 num_tokens = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_tokens:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_tokens_)));
          set_has_num_tokens();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_debug_string;
        break;
      }

      // optional string debug_string = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_debug_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_debug_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->debug_string().data(), this->debug_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_dual;
        break;
      }

      // optional bool dual = 8 [default = false];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dual:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dual_)));
          set_has_dual();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_id;
        break;
      }

      // optional string id = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_title_sentence;
        break;
      }

      // repeated .topicsum.Sentence title_sentence = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title_sentence:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_title_sentence()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_title_sentence;
        if (input->ExpectTag(96)) goto parse_num_title_tokens;
        break;
      }

      // optional int64 num_title_tokens = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_title_tokens:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_title_tokens_)));
          set_has_num_title_tokens();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_description;
        break;
      }

      // optional string description = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Document::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string title = 1;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->title(), output);
  }

  // optional string raw_content = 2;
  if (has_raw_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->raw_content().data(), this->raw_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->raw_content(), output);
  }

  // optional int64 publication_date = 3;
  if (has_publication_date()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->publication_date(), output);
  }

  // repeated .topicsum.Sentence sentence = 4;
  for (int i = 0; i < this->sentence_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->sentence(i), output);
  }

  // optional int64 num_tokens = 6;
  if (has_num_tokens()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->num_tokens(), output);
  }

  // optional string debug_string = 7;
  if (has_debug_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->debug_string().data(), this->debug_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->debug_string(), output);
  }

  // optional bool dual = 8 [default = false];
  if (has_dual()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->dual(), output);
  }

  // optional string id = 9;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->id(), output);
  }

  // repeated .topicsum.Sentence title_sentence = 11;
  for (int i = 0; i < this->title_sentence_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->title_sentence(i), output);
  }

  // optional int64 num_title_tokens = 12;
  if (has_num_title_tokens()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->num_title_tokens(), output);
  }

  // optional string description = 13;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->description(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Document::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string title = 1;
  if (has_title()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->title(), target);
  }

  // optional string raw_content = 2;
  if (has_raw_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->raw_content().data(), this->raw_content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->raw_content(), target);
  }

  // optional int64 publication_date = 3;
  if (has_publication_date()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->publication_date(), target);
  }

  // repeated .topicsum.Sentence sentence = 4;
  for (int i = 0; i < this->sentence_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->sentence(i), target);
  }

  // optional int64 num_tokens = 6;
  if (has_num_tokens()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->num_tokens(), target);
  }

  // optional string debug_string = 7;
  if (has_debug_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->debug_string().data(), this->debug_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->debug_string(), target);
  }

  // optional bool dual = 8 [default = false];
  if (has_dual()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->dual(), target);
  }

  // optional string id = 9;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->id(), target);
  }

  // repeated .topicsum.Sentence title_sentence = 11;
  for (int i = 0; i < this->title_sentence_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->title_sentence(i), target);
  }

  // optional int64 num_title_tokens = 12;
  if (has_num_title_tokens()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->num_title_tokens(), target);
  }

  // optional string description = 13;
  if (has_description()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->description(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Document::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 9;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string title = 1;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // optional string description = 13;
    if (has_description()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->description());
    }

    // optional string raw_content = 2;
    if (has_raw_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->raw_content());
    }

    // optional int64 publication_date = 3;
    if (has_publication_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->publication_date());
    }

    // optional int64 num_tokens = 6;
    if (has_num_tokens()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->num_tokens());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 num_title_tokens = 12;
    if (has_num_title_tokens()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->num_title_tokens());
    }

    // optional string debug_string = 7;
    if (has_debug_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->debug_string());
    }

    // optional bool dual = 8 [default = false];
    if (has_dual()) {
      total_size += 1 + 1;
    }

  }
  // repeated .topicsum.Sentence sentence = 4;
  total_size += 1 * this->sentence_size();
  for (int i = 0; i < this->sentence_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sentence(i));
  }

  // repeated .topicsum.Sentence title_sentence = 11;
  total_size += 1 * this->title_sentence_size();
  for (int i = 0; i < this->title_sentence_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->title_sentence(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Document::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Document* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Document*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Document::MergeFrom(const Document& from) {
  GOOGLE_CHECK_NE(&from, this);
  sentence_.MergeFrom(from.sentence_);
  title_sentence_.MergeFrom(from.title_sentence_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_description()) {
      set_description(from.description());
    }
    if (from.has_raw_content()) {
      set_raw_content(from.raw_content());
    }
    if (from.has_publication_date()) {
      set_publication_date(from.publication_date());
    }
    if (from.has_num_tokens()) {
      set_num_tokens(from.num_tokens());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_num_title_tokens()) {
      set_num_title_tokens(from.num_title_tokens());
    }
    if (from.has_debug_string()) {
      set_debug_string(from.debug_string());
    }
    if (from.has_dual()) {
      set_dual(from.dual());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Document::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Document::CopyFrom(const Document& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Document::IsInitialized() const {

  return true;
}

void Document::Swap(Document* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(title_, other->title_);
    std::swap(description_, other->description_);
    std::swap(raw_content_, other->raw_content_);
    std::swap(publication_date_, other->publication_date_);
    sentence_.Swap(&other->sentence_);
    std::swap(num_tokens_, other->num_tokens_);
    title_sentence_.Swap(&other->title_sentence_);
    std::swap(num_title_tokens_, other->num_title_tokens_);
    std::swap(debug_string_, other->debug_string_);
    std::swap(dual_, other->dual_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Document::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Document_descriptor_;
  metadata.reflection = Document_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DocumentCollection::kIdFieldNumber;
const int DocumentCollection::kDocumentFieldNumber;
const int DocumentCollection::kNumSentencesFieldNumber;
#endif  // !_MSC_VER

DocumentCollection::DocumentCollection()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DocumentCollection::InitAsDefaultInstance() {
}

DocumentCollection::DocumentCollection(const DocumentCollection& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DocumentCollection::SharedCtor() {
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  num_sentences_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DocumentCollection::~DocumentCollection() {
  SharedDtor();
}

void DocumentCollection::SharedDtor() {
  if (id_ != &::google::protobuf::internal::kEmptyString) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void DocumentCollection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DocumentCollection::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DocumentCollection_descriptor_;
}

const DocumentCollection& DocumentCollection::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_summarizer_2fdocument_2eproto();
  return *default_instance_;
}

DocumentCollection* DocumentCollection::default_instance_ = NULL;

DocumentCollection* DocumentCollection::New() const {
  return new DocumentCollection;
}

void DocumentCollection::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::kEmptyString) {
        id_->clear();
      }
    }
    num_sentences_ = GOOGLE_LONGLONG(0);
  }
  document_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DocumentCollection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_document;
        break;
      }

      // repeated .topicsum.Document document = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_document:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_document()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_document;
        if (input->ExpectTag(24)) goto parse_num_sentences;
        break;
      }

      // optional int64 num_sentences = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_sentences:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_sentences_)));
          set_has_num_sentences();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DocumentCollection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->id(), output);
  }

  // repeated .topicsum.Document document = 2;
  for (int i = 0; i < this->document_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->document(i), output);
  }

  // optional int64 num_sentences = 3;
  if (has_num_sentences()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->num_sentences(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DocumentCollection::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // repeated .topicsum.Document document = 2;
  for (int i = 0; i < this->document_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->document(i), target);
  }

  // optional int64 num_sentences = 3;
  if (has_num_sentences()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->num_sentences(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DocumentCollection::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional int64 num_sentences = 3;
    if (has_num_sentences()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->num_sentences());
    }

  }
  // repeated .topicsum.Document document = 2;
  total_size += 1 * this->document_size();
  for (int i = 0; i < this->document_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->document(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DocumentCollection::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DocumentCollection* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DocumentCollection*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DocumentCollection::MergeFrom(const DocumentCollection& from) {
  GOOGLE_CHECK_NE(&from, this);
  document_.MergeFrom(from.document_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_num_sentences()) {
      set_num_sentences(from.num_sentences());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DocumentCollection::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DocumentCollection::CopyFrom(const DocumentCollection& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DocumentCollection::IsInitialized() const {

  return true;
}

void DocumentCollection::Swap(DocumentCollection* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    document_.Swap(&other->document_);
    std::swap(num_sentences_, other->num_sentences_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DocumentCollection::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DocumentCollection_descriptor_;
  metadata.reflection = DocumentCollection_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace topicsum

// @@protoc_insertion_point(global_scope)
