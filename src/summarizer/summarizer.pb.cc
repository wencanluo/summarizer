// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: summarizer/summarizer.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "summarizer/summarizer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace topicsum {

namespace {

const ::google::protobuf::Descriptor* Article_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Article_reflection_ = NULL;
const ::google::protobuf::Descriptor* SummaryOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SummaryOptions_reflection_ = NULL;
const ::google::protobuf::Descriptor* SummaryLength_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SummaryLength_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SummaryLength_LengthUnit_descriptor_ = NULL;
const ::google::protobuf::Descriptor* GibbsSamplingOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GibbsSamplingOptions_reflection_ = NULL;
const ::google::protobuf::Descriptor* KLSumOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KLSumOptions_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* KLSumOptions_OptimizationStrategy_descriptor_ = NULL;
const ::google::protobuf::Descriptor* TopicSumOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TopicSumOptions_reflection_ = NULL;
const ::google::protobuf::Descriptor* NewsPostProcessorOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NewsPostProcessorOptions_reflection_ = NULL;
const ::google::protobuf::Descriptor* SummarizerOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SummarizerOptions_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SummarizerOptions_SummaryType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_summarizer_2fsummarizer_2eproto() {
  protobuf_AddDesc_summarizer_2fsummarizer_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "summarizer/summarizer.proto");
  GOOGLE_CHECK(file != NULL);
  Article_descriptor_ = file->message_type(0);
  static const int Article_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Article, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Article, score_),
  };
  Article_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Article_descriptor_,
      Article::default_instance_,
      Article_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Article, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Article, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Article));
  SummaryOptions_descriptor_ = file->message_type(1);
  static const int SummaryOptions_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummaryOptions, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummaryOptions, generate_debug_),
  };
  SummaryOptions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SummaryOptions_descriptor_,
      SummaryOptions::default_instance_,
      SummaryOptions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummaryOptions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummaryOptions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SummaryOptions));
  SummaryLength_descriptor_ = file->message_type(2);
  static const int SummaryLength_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummaryLength, unit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummaryLength, length_),
  };
  SummaryLength_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SummaryLength_descriptor_,
      SummaryLength::default_instance_,
      SummaryLength_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummaryLength, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummaryLength, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SummaryLength));
  SummaryLength_LengthUnit_descriptor_ = SummaryLength_descriptor_->enum_type(0);
  GibbsSamplingOptions_descriptor_ = file->message_type(3);
  static const int GibbsSamplingOptions_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GibbsSamplingOptions, iterations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GibbsSamplingOptions, burnin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GibbsSamplingOptions, lag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GibbsSamplingOptions, track_likelihood_),
  };
  GibbsSamplingOptions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GibbsSamplingOptions_descriptor_,
      GibbsSamplingOptions::default_instance_,
      GibbsSamplingOptions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GibbsSamplingOptions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GibbsSamplingOptions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GibbsSamplingOptions));
  KLSumOptions_descriptor_ = file->message_type(4);
  static const int KLSumOptions_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KLSumOptions, optimization_strategy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KLSumOptions, redundancy_removal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KLSumOptions, sentence_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KLSumOptions, summary_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KLSumOptions, prior_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KLSumOptions, postprocessor_name_),
  };
  KLSumOptions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KLSumOptions_descriptor_,
      KLSumOptions::default_instance_,
      KLSumOptions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KLSumOptions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KLSumOptions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KLSumOptions));
  KLSumOptions_OptimizationStrategy_descriptor_ = KLSumOptions_descriptor_->enum_type(0);
  TopicSumOptions_descriptor_ = file->message_type(5);
  static const int TopicSumOptions_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicSumOptions, gibbs_sampling_options_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicSumOptions, lambda_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicSumOptions, gamma_),
  };
  TopicSumOptions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TopicSumOptions_descriptor_,
      TopicSumOptions::default_instance_,
      TopicSumOptions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicSumOptions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicSumOptions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TopicSumOptions));
  NewsPostProcessorOptions_descriptor_ = file->message_type(6);
  static const int NewsPostProcessorOptions_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewsPostProcessorOptions, min_sentence_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewsPostProcessorOptions, max_sentence_length_),
  };
  NewsPostProcessorOptions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NewsPostProcessorOptions_descriptor_,
      NewsPostProcessorOptions::default_instance_,
      NewsPostProcessorOptions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewsPostProcessorOptions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewsPostProcessorOptions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NewsPostProcessorOptions));
  SummarizerOptions_descriptor_ = file->message_type(7);
  static const int SummarizerOptions_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummarizerOptions, summary_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummarizerOptions, klsum_options_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummarizerOptions, topicsum_options_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummarizerOptions, article_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummarizerOptions, news_postprocessor_options_),
  };
  SummarizerOptions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SummarizerOptions_descriptor_,
      SummarizerOptions::default_instance_,
      SummarizerOptions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummarizerOptions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SummarizerOptions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SummarizerOptions));
  SummarizerOptions_SummaryType_descriptor_ = SummarizerOptions_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_summarizer_2fsummarizer_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Article_descriptor_, &Article::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SummaryOptions_descriptor_, &SummaryOptions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SummaryLength_descriptor_, &SummaryLength::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GibbsSamplingOptions_descriptor_, &GibbsSamplingOptions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KLSumOptions_descriptor_, &KLSumOptions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TopicSumOptions_descriptor_, &TopicSumOptions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NewsPostProcessorOptions_descriptor_, &NewsPostProcessorOptions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SummarizerOptions_descriptor_, &SummarizerOptions::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_summarizer_2fsummarizer_2eproto() {
  delete Article::default_instance_;
  delete Article_reflection_;
  delete SummaryOptions::default_instance_;
  delete SummaryOptions_reflection_;
  delete SummaryLength::default_instance_;
  delete SummaryLength_reflection_;
  delete GibbsSamplingOptions::default_instance_;
  delete GibbsSamplingOptions_reflection_;
  delete KLSumOptions::default_instance_;
  delete KLSumOptions_reflection_;
  delete KLSumOptions::_default_postprocessor_name_;
  delete TopicSumOptions::default_instance_;
  delete TopicSumOptions_reflection_;
  delete TopicSumOptions::_default_lambda_;
  delete TopicSumOptions::_default_gamma_;
  delete NewsPostProcessorOptions::default_instance_;
  delete NewsPostProcessorOptions_reflection_;
  delete SummarizerOptions::default_instance_;
  delete SummarizerOptions_reflection_;
}

void protobuf_AddDesc_summarizer_2fsummarizer_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::topicsum::protobuf_AddDesc_summarizer_2fdocument_2eproto();
  ::topicsum::protobuf_AddDesc_summarizer_2fdistribution_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033summarizer/summarizer.proto\022\010topicsum\032"
    "\031summarizer/document.proto\032\035summarizer/d"
    "istribution.proto\")\n\007Article\022\017\n\007content\030"
    "\001 \001(\t\022\r\n\005score\030\002 \003(\002\"X\n\016SummaryOptions\022\'"
    "\n\006length\030\001 \001(\0132\027.topicsum.SummaryLength\022"
    "\035\n\016generate_debug\030\010 \001(\010:\005false\"\235\001\n\rSumma"
    "ryLength\0220\n\004unit\030\001 \002(\0162\".topicsum.Summar"
    "yLength.LengthUnit\022\016\n\006length\030\002 \002(\005\"J\n\nLe"
    "ngthUnit\022\r\n\tCHARACTER\020\000\022\t\n\005TOKEN\020\001\022\014\n\010SE"
    "NTENCE\020\002\022\024\n\020NUM_LENGTH_UNITS\020\003\"t\n\024GibbsS"
    "amplingOptions\022\027\n\niterations\030\001 \001(\005:\003500\022"
    "\021\n\006burnin\030\002 \001(\005:\0010\022\017\n\003lag\030\003 \001(\005:\00210\022\037\n\020t"
    "rack_likelihood\030\004 \001(\010:\005false\"\365\002\n\014KLSumOp"
    "tions\022_\n\025optimization_strategy\030\001 \001(\0162+.t"
    "opicsum.KLSumOptions.OptimizationStrateg"
    "y:\023GREEDY_OPTIMIZATION\022!\n\022redundancy_rem"
    "oval\030\002 \001(\010:\005false\022 \n\021sentence_position\030\003"
    " \001(\010:\005false\022\031\n\016summary_weight\030\005 \001(\002:\0011\022\027"
    "\n\014prior_weight\030\006 \001(\002:\0010\022-\n\022postprocessor"
    "_name\030\007 \001(\t:\021NewsPostprocessor\"\\\n\024Optimi"
    "zationStrategy\022\027\n\023GREEDY_OPTIMIZATION\020\000\022"
    "\024\n\020SENTENCE_RANKING\020\001\022\025\n\021NUM_OPTIMIZATIO"
    "NS\020\002\"\201\001\n\017TopicSumOptions\022>\n\026gibbs_sampli"
    "ng_options\030\002 \001(\0132\036.topicsum.GibbsSamplin"
    "gOptions\022\027\n\006lambda\030\003 \001(\t:\0070.1,1,1\022\025\n\005gam"
    "ma\030\004 \001(\t:\0061,5,10\"T\n\030NewsPostProcessorOpt"
    "ions\022\033\n\023min_sentence_length\030\001 \001(\005\022\033\n\023max"
    "_sentence_length\030\002 \001(\005\"\325\002\n\021SummarizerOpt"
    "ions\022=\n\014summary_type\030\001 \002(\0162\'.topicsum.Su"
    "mmarizerOptions.SummaryType\022-\n\rklsum_opt"
    "ions\030\002 \001(\0132\026.topicsum.KLSumOptions\0223\n\020to"
    "picsum_options\030\003 \001(\0132\031.topicsum.TopicSum"
    "Options\022\"\n\007article\030\004 \003(\0132\021.topicsum.Arti"
    "cle\022F\n\032news_postprocessor_options\030\005 \001(\0132"
    "\".topicsum.NewsPostProcessorOptions\"1\n\013S"
    "ummaryType\022\013\n\007GENERIC\020\001\022\t\n\005QUERY\020\002\022\n\n\006UP"
    "DATE\020\004", 1446);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "summarizer/summarizer.proto", &protobuf_RegisterTypes);
  Article::default_instance_ = new Article();
  SummaryOptions::default_instance_ = new SummaryOptions();
  SummaryLength::default_instance_ = new SummaryLength();
  GibbsSamplingOptions::default_instance_ = new GibbsSamplingOptions();
  KLSumOptions::_default_postprocessor_name_ =
      new ::std::string("NewsPostprocessor", 17);
  KLSumOptions::default_instance_ = new KLSumOptions();
  TopicSumOptions::_default_lambda_ =
      new ::std::string("0.1,1,1", 7);
  TopicSumOptions::_default_gamma_ =
      new ::std::string("1,5,10", 6);
  TopicSumOptions::default_instance_ = new TopicSumOptions();
  NewsPostProcessorOptions::default_instance_ = new NewsPostProcessorOptions();
  SummarizerOptions::default_instance_ = new SummarizerOptions();
  Article::default_instance_->InitAsDefaultInstance();
  SummaryOptions::default_instance_->InitAsDefaultInstance();
  SummaryLength::default_instance_->InitAsDefaultInstance();
  GibbsSamplingOptions::default_instance_->InitAsDefaultInstance();
  KLSumOptions::default_instance_->InitAsDefaultInstance();
  TopicSumOptions::default_instance_->InitAsDefaultInstance();
  NewsPostProcessorOptions::default_instance_->InitAsDefaultInstance();
  SummarizerOptions::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_summarizer_2fsummarizer_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_summarizer_2fsummarizer_2eproto {
  StaticDescriptorInitializer_summarizer_2fsummarizer_2eproto() {
    protobuf_AddDesc_summarizer_2fsummarizer_2eproto();
  }
} static_descriptor_initializer_summarizer_2fsummarizer_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Article::kContentFieldNumber;
const int Article::kScoreFieldNumber;
#endif  // !_MSC_VER

Article::Article()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Article::InitAsDefaultInstance() {
}

Article::Article(const Article& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Article::SharedCtor() {
  _cached_size_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Article::~Article() {
  SharedDtor();
}

void Article::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void Article::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Article::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Article_descriptor_;
}

const Article& Article::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_summarizer_2fsummarizer_2eproto();
  return *default_instance_;
}

Article* Article::default_instance_ = NULL;

Article* Article::New() const {
  return new Article;
}

void Article::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  score_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Article::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string content = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->content().data(), this->content().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_score;
        break;
      }

      // repeated float score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 21, input, this->mutable_score())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_score())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_score;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Article::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->content(), output);
  }

  // repeated float score = 2;
  for (int i = 0; i < this->score_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      2, this->score(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Article::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->content().data(), this->content().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->content(), target);
  }

  // repeated float score = 2;
  for (int i = 0; i < this->score_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(2, this->score(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Article::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string content = 1;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

  }
  // repeated float score = 2;
  {
    int data_size = 0;
    data_size = 4 * this->score_size();
    total_size += 1 * this->score_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Article::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Article* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Article*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Article::MergeFrom(const Article& from) {
  GOOGLE_CHECK_NE(&from, this);
  score_.MergeFrom(from.score_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Article::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Article::CopyFrom(const Article& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Article::IsInitialized() const {

  return true;
}

void Article::Swap(Article* other) {
  if (other != this) {
    std::swap(content_, other->content_);
    score_.Swap(&other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Article::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Article_descriptor_;
  metadata.reflection = Article_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SummaryOptions::kLengthFieldNumber;
const int SummaryOptions::kGenerateDebugFieldNumber;
#endif  // !_MSC_VER

SummaryOptions::SummaryOptions()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SummaryOptions::InitAsDefaultInstance() {
  length_ = const_cast< ::topicsum::SummaryLength*>(&::topicsum::SummaryLength::default_instance());
}

SummaryOptions::SummaryOptions(const SummaryOptions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SummaryOptions::SharedCtor() {
  _cached_size_ = 0;
  length_ = NULL;
  generate_debug_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SummaryOptions::~SummaryOptions() {
  SharedDtor();
}

void SummaryOptions::SharedDtor() {
  if (this != default_instance_) {
    delete length_;
  }
}

void SummaryOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SummaryOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SummaryOptions_descriptor_;
}

const SummaryOptions& SummaryOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_summarizer_2fsummarizer_2eproto();
  return *default_instance_;
}

SummaryOptions* SummaryOptions::default_instance_ = NULL;

SummaryOptions* SummaryOptions::New() const {
  return new SummaryOptions;
}

void SummaryOptions::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_length()) {
      if (length_ != NULL) length_->::topicsum::SummaryLength::Clear();
    }
    generate_debug_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SummaryOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .topicsum.SummaryLength length = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_length()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_generate_debug;
        break;
      }

      // optional bool generate_debug = 8 [default = false];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_generate_debug:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &generate_debug_)));
          set_has_generate_debug();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SummaryOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .topicsum.SummaryLength length = 1;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->length(), output);
  }

  // optional bool generate_debug = 8 [default = false];
  if (has_generate_debug()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->generate_debug(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SummaryOptions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .topicsum.SummaryLength length = 1;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->length(), target);
  }

  // optional bool generate_debug = 8 [default = false];
  if (has_generate_debug()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->generate_debug(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SummaryOptions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .topicsum.SummaryLength length = 1;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->length());
    }

    // optional bool generate_debug = 8 [default = false];
    if (has_generate_debug()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SummaryOptions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SummaryOptions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SummaryOptions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SummaryOptions::MergeFrom(const SummaryOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_length()) {
      mutable_length()->::topicsum::SummaryLength::MergeFrom(from.length());
    }
    if (from.has_generate_debug()) {
      set_generate_debug(from.generate_debug());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SummaryOptions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SummaryOptions::CopyFrom(const SummaryOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SummaryOptions::IsInitialized() const {

  if (has_length()) {
    if (!this->length().IsInitialized()) return false;
  }
  return true;
}

void SummaryOptions::Swap(SummaryOptions* other) {
  if (other != this) {
    std::swap(length_, other->length_);
    std::swap(generate_debug_, other->generate_debug_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SummaryOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SummaryOptions_descriptor_;
  metadata.reflection = SummaryOptions_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* SummaryLength_LengthUnit_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SummaryLength_LengthUnit_descriptor_;
}
bool SummaryLength_LengthUnit_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SummaryLength_LengthUnit SummaryLength::CHARACTER;
const SummaryLength_LengthUnit SummaryLength::TOKEN;
const SummaryLength_LengthUnit SummaryLength::SENTENCE;
const SummaryLength_LengthUnit SummaryLength::NUM_LENGTH_UNITS;
const SummaryLength_LengthUnit SummaryLength::LengthUnit_MIN;
const SummaryLength_LengthUnit SummaryLength::LengthUnit_MAX;
const int SummaryLength::LengthUnit_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SummaryLength::kUnitFieldNumber;
const int SummaryLength::kLengthFieldNumber;
#endif  // !_MSC_VER

SummaryLength::SummaryLength()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SummaryLength::InitAsDefaultInstance() {
}

SummaryLength::SummaryLength(const SummaryLength& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SummaryLength::SharedCtor() {
  _cached_size_ = 0;
  unit_ = 0;
  length_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SummaryLength::~SummaryLength() {
  SharedDtor();
}

void SummaryLength::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SummaryLength::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SummaryLength::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SummaryLength_descriptor_;
}

const SummaryLength& SummaryLength::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_summarizer_2fsummarizer_2eproto();
  return *default_instance_;
}

SummaryLength* SummaryLength::default_instance_ = NULL;

SummaryLength* SummaryLength::New() const {
  return new SummaryLength;
}

void SummaryLength::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    unit_ = 0;
    length_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SummaryLength::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .topicsum.SummaryLength.LengthUnit unit = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::topicsum::SummaryLength_LengthUnit_IsValid(value)) {
            set_unit(static_cast< ::topicsum::SummaryLength_LengthUnit >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_length;
        break;
      }

      // required int32 length = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SummaryLength::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .topicsum.SummaryLength.LengthUnit unit = 1;
  if (has_unit()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->unit(), output);
  }

  // required int32 length = 2;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->length(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SummaryLength::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .topicsum.SummaryLength.LengthUnit unit = 1;
  if (has_unit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->unit(), target);
  }

  // required int32 length = 2;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->length(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SummaryLength::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .topicsum.SummaryLength.LengthUnit unit = 1;
    if (has_unit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->unit());
    }

    // required int32 length = 2;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->length());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SummaryLength::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SummaryLength* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SummaryLength*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SummaryLength::MergeFrom(const SummaryLength& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unit()) {
      set_unit(from.unit());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SummaryLength::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SummaryLength::CopyFrom(const SummaryLength& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SummaryLength::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SummaryLength::Swap(SummaryLength* other) {
  if (other != this) {
    std::swap(unit_, other->unit_);
    std::swap(length_, other->length_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SummaryLength::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SummaryLength_descriptor_;
  metadata.reflection = SummaryLength_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GibbsSamplingOptions::kIterationsFieldNumber;
const int GibbsSamplingOptions::kBurninFieldNumber;
const int GibbsSamplingOptions::kLagFieldNumber;
const int GibbsSamplingOptions::kTrackLikelihoodFieldNumber;
#endif  // !_MSC_VER

GibbsSamplingOptions::GibbsSamplingOptions()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GibbsSamplingOptions::InitAsDefaultInstance() {
}

GibbsSamplingOptions::GibbsSamplingOptions(const GibbsSamplingOptions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GibbsSamplingOptions::SharedCtor() {
  _cached_size_ = 0;
  iterations_ = 500;
  burnin_ = 0;
  lag_ = 10;
  track_likelihood_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GibbsSamplingOptions::~GibbsSamplingOptions() {
  SharedDtor();
}

void GibbsSamplingOptions::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GibbsSamplingOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GibbsSamplingOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GibbsSamplingOptions_descriptor_;
}

const GibbsSamplingOptions& GibbsSamplingOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_summarizer_2fsummarizer_2eproto();
  return *default_instance_;
}

GibbsSamplingOptions* GibbsSamplingOptions::default_instance_ = NULL;

GibbsSamplingOptions* GibbsSamplingOptions::New() const {
  return new GibbsSamplingOptions;
}

void GibbsSamplingOptions::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    iterations_ = 500;
    burnin_ = 0;
    lag_ = 10;
    track_likelihood_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GibbsSamplingOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 iterations = 1 [default = 500];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iterations_)));
          set_has_iterations();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_burnin;
        break;
      }

      // optional int32 burnin = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_burnin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &burnin_)));
          set_has_burnin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lag;
        break;
      }

      // optional int32 lag = 3 [default = 10];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lag_)));
          set_has_lag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_track_likelihood;
        break;
      }

      // optional bool track_likelihood = 4 [default = false];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_track_likelihood:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &track_likelihood_)));
          set_has_track_likelihood();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GibbsSamplingOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 iterations = 1 [default = 500];
  if (has_iterations()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->iterations(), output);
  }

  // optional int32 burnin = 2 [default = 0];
  if (has_burnin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->burnin(), output);
  }

  // optional int32 lag = 3 [default = 10];
  if (has_lag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lag(), output);
  }

  // optional bool track_likelihood = 4 [default = false];
  if (has_track_likelihood()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->track_likelihood(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GibbsSamplingOptions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 iterations = 1 [default = 500];
  if (has_iterations()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->iterations(), target);
  }

  // optional int32 burnin = 2 [default = 0];
  if (has_burnin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->burnin(), target);
  }

  // optional int32 lag = 3 [default = 10];
  if (has_lag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lag(), target);
  }

  // optional bool track_likelihood = 4 [default = false];
  if (has_track_likelihood()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->track_likelihood(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GibbsSamplingOptions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 iterations = 1 [default = 500];
    if (has_iterations()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iterations());
    }

    // optional int32 burnin = 2 [default = 0];
    if (has_burnin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->burnin());
    }

    // optional int32 lag = 3 [default = 10];
    if (has_lag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lag());
    }

    // optional bool track_likelihood = 4 [default = false];
    if (has_track_likelihood()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GibbsSamplingOptions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GibbsSamplingOptions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GibbsSamplingOptions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GibbsSamplingOptions::MergeFrom(const GibbsSamplingOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iterations()) {
      set_iterations(from.iterations());
    }
    if (from.has_burnin()) {
      set_burnin(from.burnin());
    }
    if (from.has_lag()) {
      set_lag(from.lag());
    }
    if (from.has_track_likelihood()) {
      set_track_likelihood(from.track_likelihood());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GibbsSamplingOptions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GibbsSamplingOptions::CopyFrom(const GibbsSamplingOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GibbsSamplingOptions::IsInitialized() const {

  return true;
}

void GibbsSamplingOptions::Swap(GibbsSamplingOptions* other) {
  if (other != this) {
    std::swap(iterations_, other->iterations_);
    std::swap(burnin_, other->burnin_);
    std::swap(lag_, other->lag_);
    std::swap(track_likelihood_, other->track_likelihood_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GibbsSamplingOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GibbsSamplingOptions_descriptor_;
  metadata.reflection = GibbsSamplingOptions_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* KLSumOptions_OptimizationStrategy_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KLSumOptions_OptimizationStrategy_descriptor_;
}
bool KLSumOptions_OptimizationStrategy_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const KLSumOptions_OptimizationStrategy KLSumOptions::GREEDY_OPTIMIZATION;
const KLSumOptions_OptimizationStrategy KLSumOptions::SENTENCE_RANKING;
const KLSumOptions_OptimizationStrategy KLSumOptions::NUM_OPTIMIZATIONS;
const KLSumOptions_OptimizationStrategy KLSumOptions::OptimizationStrategy_MIN;
const KLSumOptions_OptimizationStrategy KLSumOptions::OptimizationStrategy_MAX;
const int KLSumOptions::OptimizationStrategy_ARRAYSIZE;
#endif  // _MSC_VER
::std::string* KLSumOptions::_default_postprocessor_name_ = NULL;
#ifndef _MSC_VER
const int KLSumOptions::kOptimizationStrategyFieldNumber;
const int KLSumOptions::kRedundancyRemovalFieldNumber;
const int KLSumOptions::kSentencePositionFieldNumber;
const int KLSumOptions::kSummaryWeightFieldNumber;
const int KLSumOptions::kPriorWeightFieldNumber;
const int KLSumOptions::kPostprocessorNameFieldNumber;
#endif  // !_MSC_VER

KLSumOptions::KLSumOptions()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KLSumOptions::InitAsDefaultInstance() {
}

KLSumOptions::KLSumOptions(const KLSumOptions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KLSumOptions::SharedCtor() {
  _cached_size_ = 0;
  optimization_strategy_ = 0;
  redundancy_removal_ = false;
  sentence_position_ = false;
  summary_weight_ = 1;
  prior_weight_ = 0;
  postprocessor_name_ = const_cast< ::std::string*>(_default_postprocessor_name_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KLSumOptions::~KLSumOptions() {
  SharedDtor();
}

void KLSumOptions::SharedDtor() {
  if (postprocessor_name_ != _default_postprocessor_name_) {
    delete postprocessor_name_;
  }
  if (this != default_instance_) {
  }
}

void KLSumOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KLSumOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KLSumOptions_descriptor_;
}

const KLSumOptions& KLSumOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_summarizer_2fsummarizer_2eproto();
  return *default_instance_;
}

KLSumOptions* KLSumOptions::default_instance_ = NULL;

KLSumOptions* KLSumOptions::New() const {
  return new KLSumOptions;
}

void KLSumOptions::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    optimization_strategy_ = 0;
    redundancy_removal_ = false;
    sentence_position_ = false;
    summary_weight_ = 1;
    prior_weight_ = 0;
    if (has_postprocessor_name()) {
      if (postprocessor_name_ != _default_postprocessor_name_) {
        postprocessor_name_->assign(*_default_postprocessor_name_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KLSumOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .topicsum.KLSumOptions.OptimizationStrategy optimization_strategy = 1 [default = GREEDY_OPTIMIZATION];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::topicsum::KLSumOptions_OptimizationStrategy_IsValid(value)) {
            set_optimization_strategy(static_cast< ::topicsum::KLSumOptions_OptimizationStrategy >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_redundancy_removal;
        break;
      }

      // optional bool redundancy_removal = 2 [default = false];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_redundancy_removal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &redundancy_removal_)));
          set_has_redundancy_removal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sentence_position;
        break;
      }

      // optional bool sentence_position = 3 [default = false];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sentence_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sentence_position_)));
          set_has_sentence_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_summary_weight;
        break;
      }

      // optional float summary_weight = 5 [default = 1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_summary_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &summary_weight_)));
          set_has_summary_weight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_prior_weight;
        break;
      }

      // optional float prior_weight = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_prior_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &prior_weight_)));
          set_has_prior_weight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_postprocessor_name;
        break;
      }

      // optional string postprocessor_name = 7 [default = "NewsPostprocessor"];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_postprocessor_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_postprocessor_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->postprocessor_name().data(), this->postprocessor_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KLSumOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .topicsum.KLSumOptions.OptimizationStrategy optimization_strategy = 1 [default = GREEDY_OPTIMIZATION];
  if (has_optimization_strategy()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->optimization_strategy(), output);
  }

  // optional bool redundancy_removal = 2 [default = false];
  if (has_redundancy_removal()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->redundancy_removal(), output);
  }

  // optional bool sentence_position = 3 [default = false];
  if (has_sentence_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->sentence_position(), output);
  }

  // optional float summary_weight = 5 [default = 1];
  if (has_summary_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->summary_weight(), output);
  }

  // optional float prior_weight = 6 [default = 0];
  if (has_prior_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->prior_weight(), output);
  }

  // optional string postprocessor_name = 7 [default = "NewsPostprocessor"];
  if (has_postprocessor_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->postprocessor_name().data(), this->postprocessor_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->postprocessor_name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KLSumOptions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .topicsum.KLSumOptions.OptimizationStrategy optimization_strategy = 1 [default = GREEDY_OPTIMIZATION];
  if (has_optimization_strategy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->optimization_strategy(), target);
  }

  // optional bool redundancy_removal = 2 [default = false];
  if (has_redundancy_removal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->redundancy_removal(), target);
  }

  // optional bool sentence_position = 3 [default = false];
  if (has_sentence_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->sentence_position(), target);
  }

  // optional float summary_weight = 5 [default = 1];
  if (has_summary_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->summary_weight(), target);
  }

  // optional float prior_weight = 6 [default = 0];
  if (has_prior_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->prior_weight(), target);
  }

  // optional string postprocessor_name = 7 [default = "NewsPostprocessor"];
  if (has_postprocessor_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->postprocessor_name().data(), this->postprocessor_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->postprocessor_name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KLSumOptions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .topicsum.KLSumOptions.OptimizationStrategy optimization_strategy = 1 [default = GREEDY_OPTIMIZATION];
    if (has_optimization_strategy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->optimization_strategy());
    }

    // optional bool redundancy_removal = 2 [default = false];
    if (has_redundancy_removal()) {
      total_size += 1 + 1;
    }

    // optional bool sentence_position = 3 [default = false];
    if (has_sentence_position()) {
      total_size += 1 + 1;
    }

    // optional float summary_weight = 5 [default = 1];
    if (has_summary_weight()) {
      total_size += 1 + 4;
    }

    // optional float prior_weight = 6 [default = 0];
    if (has_prior_weight()) {
      total_size += 1 + 4;
    }

    // optional string postprocessor_name = 7 [default = "NewsPostprocessor"];
    if (has_postprocessor_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->postprocessor_name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KLSumOptions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KLSumOptions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KLSumOptions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KLSumOptions::MergeFrom(const KLSumOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_optimization_strategy()) {
      set_optimization_strategy(from.optimization_strategy());
    }
    if (from.has_redundancy_removal()) {
      set_redundancy_removal(from.redundancy_removal());
    }
    if (from.has_sentence_position()) {
      set_sentence_position(from.sentence_position());
    }
    if (from.has_summary_weight()) {
      set_summary_weight(from.summary_weight());
    }
    if (from.has_prior_weight()) {
      set_prior_weight(from.prior_weight());
    }
    if (from.has_postprocessor_name()) {
      set_postprocessor_name(from.postprocessor_name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KLSumOptions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KLSumOptions::CopyFrom(const KLSumOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KLSumOptions::IsInitialized() const {

  return true;
}

void KLSumOptions::Swap(KLSumOptions* other) {
  if (other != this) {
    std::swap(optimization_strategy_, other->optimization_strategy_);
    std::swap(redundancy_removal_, other->redundancy_removal_);
    std::swap(sentence_position_, other->sentence_position_);
    std::swap(summary_weight_, other->summary_weight_);
    std::swap(prior_weight_, other->prior_weight_);
    std::swap(postprocessor_name_, other->postprocessor_name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KLSumOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KLSumOptions_descriptor_;
  metadata.reflection = KLSumOptions_reflection_;
  return metadata;
}


// ===================================================================

::std::string* TopicSumOptions::_default_lambda_ = NULL;
::std::string* TopicSumOptions::_default_gamma_ = NULL;
#ifndef _MSC_VER
const int TopicSumOptions::kGibbsSamplingOptionsFieldNumber;
const int TopicSumOptions::kLambdaFieldNumber;
const int TopicSumOptions::kGammaFieldNumber;
#endif  // !_MSC_VER

TopicSumOptions::TopicSumOptions()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TopicSumOptions::InitAsDefaultInstance() {
  gibbs_sampling_options_ = const_cast< ::topicsum::GibbsSamplingOptions*>(&::topicsum::GibbsSamplingOptions::default_instance());
}

TopicSumOptions::TopicSumOptions(const TopicSumOptions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TopicSumOptions::SharedCtor() {
  _cached_size_ = 0;
  gibbs_sampling_options_ = NULL;
  lambda_ = const_cast< ::std::string*>(_default_lambda_);
  gamma_ = const_cast< ::std::string*>(_default_gamma_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TopicSumOptions::~TopicSumOptions() {
  SharedDtor();
}

void TopicSumOptions::SharedDtor() {
  if (lambda_ != _default_lambda_) {
    delete lambda_;
  }
  if (gamma_ != _default_gamma_) {
    delete gamma_;
  }
  if (this != default_instance_) {
    delete gibbs_sampling_options_;
  }
}

void TopicSumOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TopicSumOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TopicSumOptions_descriptor_;
}

const TopicSumOptions& TopicSumOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_summarizer_2fsummarizer_2eproto();
  return *default_instance_;
}

TopicSumOptions* TopicSumOptions::default_instance_ = NULL;

TopicSumOptions* TopicSumOptions::New() const {
  return new TopicSumOptions;
}

void TopicSumOptions::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_gibbs_sampling_options()) {
      if (gibbs_sampling_options_ != NULL) gibbs_sampling_options_->::topicsum::GibbsSamplingOptions::Clear();
    }
    if (has_lambda()) {
      if (lambda_ != _default_lambda_) {
        lambda_->assign(*_default_lambda_);
      }
    }
    if (has_gamma()) {
      if (gamma_ != _default_gamma_) {
        gamma_->assign(*_default_gamma_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TopicSumOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .topicsum.GibbsSamplingOptions gibbs_sampling_options = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gibbs_sampling_options()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_lambda;
        break;
      }

      // optional string lambda = 3 [default = "0.1,1,1"];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lambda:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lambda()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lambda().data(), this->lambda().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_gamma;
        break;
      }

      // optional string gamma = 4 [default = "1,5,10"];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_gamma:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_gamma()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->gamma().data(), this->gamma().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TopicSumOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .topicsum.GibbsSamplingOptions gibbs_sampling_options = 2;
  if (has_gibbs_sampling_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->gibbs_sampling_options(), output);
  }

  // optional string lambda = 3 [default = "0.1,1,1"];
  if (has_lambda()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lambda().data(), this->lambda().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->lambda(), output);
  }

  // optional string gamma = 4 [default = "1,5,10"];
  if (has_gamma()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gamma().data(), this->gamma().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->gamma(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TopicSumOptions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .topicsum.GibbsSamplingOptions gibbs_sampling_options = 2;
  if (has_gibbs_sampling_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->gibbs_sampling_options(), target);
  }

  // optional string lambda = 3 [default = "0.1,1,1"];
  if (has_lambda()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lambda().data(), this->lambda().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->lambda(), target);
  }

  // optional string gamma = 4 [default = "1,5,10"];
  if (has_gamma()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->gamma().data(), this->gamma().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->gamma(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TopicSumOptions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .topicsum.GibbsSamplingOptions gibbs_sampling_options = 2;
    if (has_gibbs_sampling_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gibbs_sampling_options());
    }

    // optional string lambda = 3 [default = "0.1,1,1"];
    if (has_lambda()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lambda());
    }

    // optional string gamma = 4 [default = "1,5,10"];
    if (has_gamma()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->gamma());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TopicSumOptions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TopicSumOptions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TopicSumOptions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TopicSumOptions::MergeFrom(const TopicSumOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gibbs_sampling_options()) {
      mutable_gibbs_sampling_options()->::topicsum::GibbsSamplingOptions::MergeFrom(from.gibbs_sampling_options());
    }
    if (from.has_lambda()) {
      set_lambda(from.lambda());
    }
    if (from.has_gamma()) {
      set_gamma(from.gamma());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TopicSumOptions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopicSumOptions::CopyFrom(const TopicSumOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopicSumOptions::IsInitialized() const {

  return true;
}

void TopicSumOptions::Swap(TopicSumOptions* other) {
  if (other != this) {
    std::swap(gibbs_sampling_options_, other->gibbs_sampling_options_);
    std::swap(lambda_, other->lambda_);
    std::swap(gamma_, other->gamma_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TopicSumOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TopicSumOptions_descriptor_;
  metadata.reflection = TopicSumOptions_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NewsPostProcessorOptions::kMinSentenceLengthFieldNumber;
const int NewsPostProcessorOptions::kMaxSentenceLengthFieldNumber;
#endif  // !_MSC_VER

NewsPostProcessorOptions::NewsPostProcessorOptions()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NewsPostProcessorOptions::InitAsDefaultInstance() {
}

NewsPostProcessorOptions::NewsPostProcessorOptions(const NewsPostProcessorOptions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NewsPostProcessorOptions::SharedCtor() {
  _cached_size_ = 0;
  min_sentence_length_ = 0;
  max_sentence_length_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewsPostProcessorOptions::~NewsPostProcessorOptions() {
  SharedDtor();
}

void NewsPostProcessorOptions::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NewsPostProcessorOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewsPostProcessorOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NewsPostProcessorOptions_descriptor_;
}

const NewsPostProcessorOptions& NewsPostProcessorOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_summarizer_2fsummarizer_2eproto();
  return *default_instance_;
}

NewsPostProcessorOptions* NewsPostProcessorOptions::default_instance_ = NULL;

NewsPostProcessorOptions* NewsPostProcessorOptions::New() const {
  return new NewsPostProcessorOptions;
}

void NewsPostProcessorOptions::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    min_sentence_length_ = 0;
    max_sentence_length_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NewsPostProcessorOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 min_sentence_length = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_sentence_length_)));
          set_has_min_sentence_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_max_sentence_length;
        break;
      }

      // optional int32 max_sentence_length = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_sentence_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_sentence_length_)));
          set_has_max_sentence_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NewsPostProcessorOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 min_sentence_length = 1;
  if (has_min_sentence_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->min_sentence_length(), output);
  }

  // optional int32 max_sentence_length = 2;
  if (has_max_sentence_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->max_sentence_length(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NewsPostProcessorOptions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 min_sentence_length = 1;
  if (has_min_sentence_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->min_sentence_length(), target);
  }

  // optional int32 max_sentence_length = 2;
  if (has_max_sentence_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->max_sentence_length(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NewsPostProcessorOptions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 min_sentence_length = 1;
    if (has_min_sentence_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_sentence_length());
    }

    // optional int32 max_sentence_length = 2;
    if (has_max_sentence_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_sentence_length());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewsPostProcessorOptions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NewsPostProcessorOptions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NewsPostProcessorOptions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NewsPostProcessorOptions::MergeFrom(const NewsPostProcessorOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_min_sentence_length()) {
      set_min_sentence_length(from.min_sentence_length());
    }
    if (from.has_max_sentence_length()) {
      set_max_sentence_length(from.max_sentence_length());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NewsPostProcessorOptions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewsPostProcessorOptions::CopyFrom(const NewsPostProcessorOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewsPostProcessorOptions::IsInitialized() const {

  return true;
}

void NewsPostProcessorOptions::Swap(NewsPostProcessorOptions* other) {
  if (other != this) {
    std::swap(min_sentence_length_, other->min_sentence_length_);
    std::swap(max_sentence_length_, other->max_sentence_length_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NewsPostProcessorOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NewsPostProcessorOptions_descriptor_;
  metadata.reflection = NewsPostProcessorOptions_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* SummarizerOptions_SummaryType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SummarizerOptions_SummaryType_descriptor_;
}
bool SummarizerOptions_SummaryType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SummarizerOptions_SummaryType SummarizerOptions::GENERIC;
const SummarizerOptions_SummaryType SummarizerOptions::QUERY;
const SummarizerOptions_SummaryType SummarizerOptions::UPDATE;
const SummarizerOptions_SummaryType SummarizerOptions::SummaryType_MIN;
const SummarizerOptions_SummaryType SummarizerOptions::SummaryType_MAX;
const int SummarizerOptions::SummaryType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SummarizerOptions::kSummaryTypeFieldNumber;
const int SummarizerOptions::kKlsumOptionsFieldNumber;
const int SummarizerOptions::kTopicsumOptionsFieldNumber;
const int SummarizerOptions::kArticleFieldNumber;
const int SummarizerOptions::kNewsPostprocessorOptionsFieldNumber;
#endif  // !_MSC_VER

SummarizerOptions::SummarizerOptions()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SummarizerOptions::InitAsDefaultInstance() {
  klsum_options_ = const_cast< ::topicsum::KLSumOptions*>(&::topicsum::KLSumOptions::default_instance());
  topicsum_options_ = const_cast< ::topicsum::TopicSumOptions*>(&::topicsum::TopicSumOptions::default_instance());
  news_postprocessor_options_ = const_cast< ::topicsum::NewsPostProcessorOptions*>(&::topicsum::NewsPostProcessorOptions::default_instance());
}

SummarizerOptions::SummarizerOptions(const SummarizerOptions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SummarizerOptions::SharedCtor() {
  _cached_size_ = 0;
  summary_type_ = 1;
  klsum_options_ = NULL;
  topicsum_options_ = NULL;
  news_postprocessor_options_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SummarizerOptions::~SummarizerOptions() {
  SharedDtor();
}

void SummarizerOptions::SharedDtor() {
  if (this != default_instance_) {
    delete klsum_options_;
    delete topicsum_options_;
    delete news_postprocessor_options_;
  }
}

void SummarizerOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SummarizerOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SummarizerOptions_descriptor_;
}

const SummarizerOptions& SummarizerOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_summarizer_2fsummarizer_2eproto();
  return *default_instance_;
}

SummarizerOptions* SummarizerOptions::default_instance_ = NULL;

SummarizerOptions* SummarizerOptions::New() const {
  return new SummarizerOptions;
}

void SummarizerOptions::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    summary_type_ = 1;
    if (has_klsum_options()) {
      if (klsum_options_ != NULL) klsum_options_->::topicsum::KLSumOptions::Clear();
    }
    if (has_topicsum_options()) {
      if (topicsum_options_ != NULL) topicsum_options_->::topicsum::TopicSumOptions::Clear();
    }
    if (has_news_postprocessor_options()) {
      if (news_postprocessor_options_ != NULL) news_postprocessor_options_->::topicsum::NewsPostProcessorOptions::Clear();
    }
  }
  article_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SummarizerOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .topicsum.SummarizerOptions.SummaryType summary_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::topicsum::SummarizerOptions_SummaryType_IsValid(value)) {
            set_summary_type(static_cast< ::topicsum::SummarizerOptions_SummaryType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_klsum_options;
        break;
      }

      // optional .topicsum.KLSumOptions klsum_options = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_klsum_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_klsum_options()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_topicsum_options;
        break;
      }

      // optional .topicsum.TopicSumOptions topicsum_options = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_topicsum_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_topicsum_options()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_article;
        break;
      }

      // repeated .topicsum.Article article = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_article:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_article()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_article;
        if (input->ExpectTag(42)) goto parse_news_postprocessor_options;
        break;
      }

      // optional .topicsum.NewsPostProcessorOptions news_postprocessor_options = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_news_postprocessor_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_news_postprocessor_options()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SummarizerOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .topicsum.SummarizerOptions.SummaryType summary_type = 1;
  if (has_summary_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->summary_type(), output);
  }

  // optional .topicsum.KLSumOptions klsum_options = 2;
  if (has_klsum_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->klsum_options(), output);
  }

  // optional .topicsum.TopicSumOptions topicsum_options = 3;
  if (has_topicsum_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->topicsum_options(), output);
  }

  // repeated .topicsum.Article article = 4;
  for (int i = 0; i < this->article_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->article(i), output);
  }

  // optional .topicsum.NewsPostProcessorOptions news_postprocessor_options = 5;
  if (has_news_postprocessor_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->news_postprocessor_options(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SummarizerOptions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .topicsum.SummarizerOptions.SummaryType summary_type = 1;
  if (has_summary_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->summary_type(), target);
  }

  // optional .topicsum.KLSumOptions klsum_options = 2;
  if (has_klsum_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->klsum_options(), target);
  }

  // optional .topicsum.TopicSumOptions topicsum_options = 3;
  if (has_topicsum_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->topicsum_options(), target);
  }

  // repeated .topicsum.Article article = 4;
  for (int i = 0; i < this->article_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->article(i), target);
  }

  // optional .topicsum.NewsPostProcessorOptions news_postprocessor_options = 5;
  if (has_news_postprocessor_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->news_postprocessor_options(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SummarizerOptions::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .topicsum.SummarizerOptions.SummaryType summary_type = 1;
    if (has_summary_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->summary_type());
    }

    // optional .topicsum.KLSumOptions klsum_options = 2;
    if (has_klsum_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->klsum_options());
    }

    // optional .topicsum.TopicSumOptions topicsum_options = 3;
    if (has_topicsum_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->topicsum_options());
    }

    // optional .topicsum.NewsPostProcessorOptions news_postprocessor_options = 5;
    if (has_news_postprocessor_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->news_postprocessor_options());
    }

  }
  // repeated .topicsum.Article article = 4;
  total_size += 1 * this->article_size();
  for (int i = 0; i < this->article_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->article(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SummarizerOptions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SummarizerOptions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SummarizerOptions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SummarizerOptions::MergeFrom(const SummarizerOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  article_.MergeFrom(from.article_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_summary_type()) {
      set_summary_type(from.summary_type());
    }
    if (from.has_klsum_options()) {
      mutable_klsum_options()->::topicsum::KLSumOptions::MergeFrom(from.klsum_options());
    }
    if (from.has_topicsum_options()) {
      mutable_topicsum_options()->::topicsum::TopicSumOptions::MergeFrom(from.topicsum_options());
    }
    if (from.has_news_postprocessor_options()) {
      mutable_news_postprocessor_options()->::topicsum::NewsPostProcessorOptions::MergeFrom(from.news_postprocessor_options());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SummarizerOptions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SummarizerOptions::CopyFrom(const SummarizerOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SummarizerOptions::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SummarizerOptions::Swap(SummarizerOptions* other) {
  if (other != this) {
    std::swap(summary_type_, other->summary_type_);
    std::swap(klsum_options_, other->klsum_options_);
    std::swap(topicsum_options_, other->topicsum_options_);
    article_.Swap(&other->article_);
    std::swap(news_postprocessor_options_, other->news_postprocessor_options_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SummarizerOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SummarizerOptions_descriptor_;
  metadata.reflection = SummarizerOptions_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace topicsum

// @@protoc_insertion_point(global_scope)
